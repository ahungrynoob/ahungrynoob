export default [
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/227',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/227/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/227/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/227/events',
    html_url: 'https://github.com/lifesinger/blog/issues/227',
    id: 126186859,
    node_id: 'MDU6SXNzdWUxMjYxODY4NTk=',
    number: 227,
    title: '善良比聪明重要',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 26,
    created_at: '2016-01-12T14:07:32Z',
    updated_at: '2019-06-03T16:11:12Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![](https://camo.githubusercontent.com/2c9376998e6bb7f6fe50664ae8bd3e0a63440471/687474703a2f2f6d6d62697a2e717069632e636e2f6d6d62697a2f44464156324b797463625569615543346d4d46477746524c64656f6e38314d4a565477365433726a38333057515a4f724847776c6575674757794b6a3245714a34546d70636458614b316c6a4f736a69635a6e39483278672f3634303f77785f666d743d6a7065672674703d7765627026777866726f6d3d35)\n\n2010 年，亚马逊 CEO 杰夫·贝佐斯（Jeff Bezos）在母校普林斯顿大学的毕业典礼上，勉励年轻人，善用自己的天赋，做出对的选择。因为，「人生到头来，我们的选择，决定了我们是什么样的人。」\n\n以下是 Bezos 演讲内容：\n\nAs a kid, I spent my summers with my grandparents on their ranch in Texas. I helped fix windmills, vaccinate cattle, and do other chores. We also watched soap operas every afternoon, especially "Days of our Lives." My grandparents belonged to a Caravan Club, a group of Airstream trailer owners who travel together around the U.S. and Canada. And every few summers, we\'d join the caravan. We\'d hitch up the Airstream trailer to my grandfather\'s car, and off we\'d go, in a line with 300 other Airstream adventurers. I loved and worshipped my grandparents and I really looked forward to these trips. On one particular trip, I was about 10 years old. I was rolling around in the big bench seat in the back of the car. My grandfather was driving. And my grandmother had the passenger seat. She smoked throughout these trips, and I hated the smell.\n\n孩提时代，我总是在德州祖父母的农场中度过夏天。我帮忙修理风车，为牛接种疫苗，也做其他杂活。每天下午，我们也看肥皂剧，特别是《光辉岁月》。祖父母参加了一个房车俱乐部，一群人驾驶 Airstream 房车，结伴游历美国和加拿大。每隔几个夏天，我们会加入一次旅程。把房车挂在祖父的小汽车后面，融入 300 余名 Airstream 探险者的浩荡队伍中，就这样出发。我爱祖父母，心怀敬仰，很期盼这些旅程。在我大约 10 岁时，有一次很特殊的旅程。那次我胡乱坐在后座上，祖父开着车，祖母坐在他旁边。整个旅程祖母都吸着烟，我讨厌烟味。\n\nAt that age, I\'d take any excuse to make estimates and do minor arithmetic. I\'d calculate our gas mileage -- figure out useless statistics on things like grocery spending. I\'d been hearing an ad campaign about smoking. I can\'t remember the details, but basically the ad said, every puff of a cigarette takes some number of minutes off of your life: I think it might have been two minutes per puff. At any rate, I decided to do the math for my grandmother. I estimated the number of cigarettes per days, estimated the number of puffs per cigarette and so on. When I was satisfied that I\'d come up with a reasonable number, I poked my head into the front of the car, tapped my grandmother on the shoulder, and proudly proclaimed, "At two minutes per puff, you\'ve taken nine years off your life!” I have a vivid memory of what happened, and it was not what I expected. I expected to be applauded for my cleverness and arithmetic skills. "Jeff, you\'re so smart. You had to have made some tricky estimates, figure out the number of minutes in a year and do some division." That\'s not what happened. Instead, my grandmother burst into tears. I sat in the backseat and did not know what to do. While my grandmother sat crying, my grandfather, who had been driving in silence, pulled over onto the shoulder of the highway. He got out of the car and came around and opened my door and waited for me to follow. Was I in trouble? My grandfather was a highly intelligent, quiet man. He had never said a harsh word to me, and maybe this was to be the first time? Or maybe he would ask that I get back in the car and apologize to my grandmother. I had no experience in this realm with my grandparents and no way to gauge what the consequences might be. We stopped beside the trailer. My grandfather looked at me, and after a bit of silence, he gently and calmly said, "Jeff, one day you\'ll understand that it\'s harder to be kind than clever.”\n\n当年，我总是想尽办法去做估测或小算术。我会计算油耗还有杂货花销等鸡毛蒜皮的小事。我听过一个与吸烟相关的广告，但记不清细节了。广告大意是，每吸一口香烟会减少几分钟寿命，好像是两分钟。管它几分钟呢，我决定为祖母做个算术。我估测了祖母每天吸几支香烟，每支香烟吸几口等等，然后心满意足地得出了一个合理的数字。接着，我把头探入汽车前排，拍了拍祖母的肩膀，骄傲地宣称：「如果每吸一口烟少活两分钟的话，你的寿命已经少了九年！」我清晰地记得接下来发生的事，是我意料之外的。凭借聪明的大脑和算术技巧，我期待赢来夸赞：「杰夫，你真聪明。你应该做一些更需要技巧的算术，比如一年有多少分钟，以及做些除法。」我的期待并没有发生。相反，祖母突然哭泣起来，我坐在后座茫然无措。祖父一直在默默开车，听到祖母的哭声，把车停在高速路边。祖父走下车来，打开车门，等我跟他下车。我惹麻烦了吗？祖父是一个智慧而安静的人。他从来没有对我说过严厉的话，难道这会是第一次？还是他会让我回到车上给祖母道歉？我以前从未遇到过这种状况，无从知晓会有什么后果发生。我们在房车旁停下来，祖父注视着我，沉默片刻，然后轻轻地、平静地说： **「杰夫，有一天你会明白，善良比聪明更难。」**\n\nWhat I want to talk to you about today is the difference between gifts and choices. Cleverness is a gift, kindness is a choice. Gifts are easy -- they\'re given after all. Choices can be hard. You can seduce yourself with your gifts if you\'re not careful, and if you do, it\'ll probably be to the detriment of your choices. This is a group with many gifts. I\'m sure one of your gifts is the gift of a smart and capable brain. I\'m confident that\'s the case because admission is competitive and if there weren\'t some signs that you\'re clever, the dean of admission wouldn\'t have let you in.\n\n今天我想对你们说的是，天赋和选择的不同。 **聪明是一种天赋，而善良是一种选择。** 天赋得来容易 —— 毕竟与生俱来。而选择颇为不易。一不小心，你可能会被天赋所诱惑，而这可能会损害到你的选择。 在座各位都拥有众多天赋。我确信你们的天赋之一就是拥有精明能干的头脑。之所以如此确信，是因为入学竞争如此激烈，如果你们不聪明，便不会有资格进入这所学校。\n\nYour smarts will come in handy because you will travel in a land of marvels. We humans — plodding as we are -- will astonish ourselves. We\'ll invent ways to generate clean energy and a lot of it. Atom by atom, we\'ll assemble tiny machines that will enter cell walls and make repairs. This month comes the extraordinary but also inevitable news that we\'ve synthesized life. In the coming years, we\'ll not only synthesize it, but we\'ll engineer it to specifications. I believe you\'ll even see us understand the human brain. Jules Verne, Mark Twain, Galileo, Newton -- all the curious from the ages would have wanted to be alive most of all right now. As a civilization, we will have so many gifts, just as you as individuals have so many individual gifts as you sit before me. How will you use these gifts? And will you take pride in your gifts or pride in your choices?\n\n你们将在一片充满奇迹的世界上前行，聪明才智必能派上用场。我们人类，尽管跬步前行，却终将令自己大吃一惊。我们能够想方设法制造清洁能源等等，也能够一个原子一个原子地组装微型机械，使之穿过细胞壁，去修复细胞。这个月，有一个非常激动人心却又不足为奇的消息 —— 人类终于合成了生命。在未来几年，我们不仅会合成生命，还能将之工程规范化。我相信你们甚至会看到人类大脑被彻底理解。儒勒·凡尔纳、马克·吐温、伽利略、牛顿 —— 所有那些充满好奇之心的人都希望能够活在现在。作为文明人，我们拥有如此多的天赋，就像是坐在我面前的你们，每一个生命个体都拥有众多独特的天赋。如何运用这些天赋？为自己的天赋感到骄傲，还是会为自己的选择感到骄傲？\n\nI got the idea to start Amazon 16 years ago. I came across the fact that Web usage was growing at 2,300 percent per year. I\'d never seen or heard of anything that grew that fast, and the idea of building an online bookstore with millions of titles -- something that simply couldn\'t exist in the physical world -- was very exciting to me. I had just turned 30 years old, and I\'d been married for a year. I told my wife MacKenzie that I wanted to quit my job and go do this crazy thing that probably wouldn\'t work since most startups don\'t, and I wasn\'t sure what would happen after that. MacKenzie (also a Princeton grad and sitting here in the second row) told me I should go for it. As a young boy, I\'d been a garage inventor. I\'d invented an automatic gate closer out of cement-filled tires, a solar cooker that didn\'t work very well out of an umbrella and tinfoil, baking-pan alarms to entrap my siblings. I\'d always wanted to be an inventor, and she wanted me to follow my passion.\n\n16 年前，我萌生了创办亚马逊的想法。当年，互联网使用量以每年 2300% 的速度增长，我从未看到或听说过任何东西增长如此快速。有个想法令我异常兴奋 —— 创建涵盖几百万种书籍的网上书店，这东西在物理世界根本无法存在。那时我刚满 30 岁，结婚才一年。我告诉妻子 MacKenzie 想辞去工作，然后去做这件疯狂的事，很可能会失败，因为大部分创业公司都如此，而且我不确定之后会发生什么。MacKenzie （也是普林斯顿毕业生，就坐在下面第二排）告诉我，我应该放手一搏。少年时期，我是一名车库发明家。我曾用水泥填充的轮胎制作自动关门器，用雨伞和锡箔制作太阳能炒锅（虽然不太好用），我还用煎锅做了一个警报器来吓唬邻居。我一直想做一个发明家，MacKenzie 支持我追随内心的热情。\n\nI was working at a financial firm in New York City with a bunch of very smart people, and I had a brilliant boss that I much admired. I went to my boss and told him I wanted to start a company selling books on the Internet. He took me on a long walk in Central Park, listened carefully to me, and finally said, "That sounds like a really good idea, but it would be an even better idea for someone who didn\'t already have a good job." That logic made some sense to me, and he convinced me to think about it for 48 hours before making a final decision. Seen in that light, it really was a difficult choice, but ultimately, I decided I had to give it a shot. I didn\'t think I\'d regret trying and failing. And I suspected I would always be haunted by a decision to not try at all. After much consideration, I took the less safe path to follow my passion, and I\'m proud of that choice.\n\n我当时在纽约一家金融公司工作，同事是一群非常聪明的人，老板也很有智慧，我很敬佩他。我告诉老板我想开办一家公司，在网上卖书。老板带我在中央公园漫步良久，认真听我讲完，最后说：「听起来真是一个很好的主意。然而，对那些目前没有谋到一份好工作的人来说，这个主意会更好。」这一逻辑对我而言颇有道理，老板说服我做出最终决定之前再考虑 48 小时。那样想来，这个决定确实很艰难，但是最终，我决定拼一次。 **我认为自己不会为尝试过后的失败而遗憾，倒是有所决定但完全不付诸行动会一直煎熬着我。** 深思熟虑后，我选择了那条不安全的道路，去追随内心的热情。我为自己的决定感到骄傲。\n\nTomorrow, in a very real sense, your life -- the life you author from scratch on your own -- begins.\nHow will you use your gifts? What choices will you make?\nWill inertia be your guide, or will you follow your passions?\nWill you follow dogma, or will you be original?\nWill you choose a life of ease, or a life of service and adventure?\nWill you wilt under criticism, or will you follow your convictions?\nWill you bluff it out when you\'re wrong, or will you apologize?\nWill you guard your heart against rejection, or will you act when you fall in love?\nWill you play it safe, or will you be a little bit swashbuckling? When it\'s tough, will you give up, or will you be relentless?\nWill you be a cynic, or will you be a builder?\nWill you be clever at the expense of others, or will you be kind?\n\n明天，非常现实地说，从零塑造自己人生的时代，即将开启。\n你会如何运用自己的天赋？又会做出怎样的抉择？\n你会随波逐流，还是追随内心的热情？\n你会顺从于教条，还是保持初心？\n你会选择安逸的生活，还是奉献与冒险的人生？\n你会屈于批评，还是会坚守信念？\n你会掩饰错误，还是会坦诚道歉？\n你会因害怕拒绝而掩饰真心，还是会在深爱中勇往直前？\n你想要波澜不惊，还是想搏击风浪？\n你会在严峻的现实之下选择放弃，还是会义无反顾前行？\n你要做愤世嫉俗者，还是踏实建设者？\n你要不计一切地展示聪明，还是选择善良？\n\nI will hazard a prediction. When you are 80 years old, and in a quiet moment of reflection narrating for only yourself the most personal version of your life story, the telling that will be most compact and meaningful will be the series of choices you have made. In the end, we are our choices. Build yourself a great story.\n\nThank you and good luck!\n\n我要做一个预测：在大家 80 岁追忆往昔的时刻，一个人静静对内心诉说人生故事时，其中最为充实、最有意义的那段故事，会是大家做出的一系列选择。最后， **是选择塑造了我们，为自己塑造一个伟大的故事吧。**\n\n谢谢，祝福好运！\n\n（完）\n\n说明：初始译文来自网络，未找到原作者。细节有瑕疵，还有小部分漏译，我做了大量修正。\n\nBezos 演讲视频：[点此播放](http://v.youku.com/v_show/id_XNDEzMTMxNzQ4.html)\n\n---\n\n欢迎关注「探索时间」微信公众号：\n![](https://os.alipayobjects.com/rmsportal/iGEFtEmkNabgVPH.jpg)\n探索有趣的事，遇见有趣的人。\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/226',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/226/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/226/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/226/events',
    html_url: 'https://github.com/lifesinger/blog/issues/226',
    id: 121408964,
    node_id: 'MDU6SXNzdWUxMjE0MDg5NjQ=',
    number: 226,
    title: '从个体到团队',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 13,
    created_at: '2015-12-10T05:57:17Z',
    updated_at: '2017-03-27T02:29:14Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![](https://os.alipayobjects.com/rmsportal/PYKvqLgUkejmhgw.jpeg)\n\n每位年轻的个体，都有一颗不安分的心。\n\n这个博客，就是一种不安分。想 make some noise，想去探索更多有趣的事，想去遇见更多有趣的人。\n\n只是一个人太孤单，一颗不安分的心太渺小。如何去发生更多惊喜，光靠一个人不够，需要的是一群人，需要的是一群不安分的心。\n\n就有了想法，想从一个人的求索，转换成一群人的探索。这一群人，就在我身边，我所在的团队。\n\n我们在蚂蚁金服体验技术部，由一群设计师与工程师组成。设计、技术、产品，以及自由，是我们追逐的梦想。我们想做地球上专业有爱的团队，我们想打造体验一流的产品。我们一点一滴践行，让生活变得更美好。\n\n这是一种在一起的力量，是一种我们的力量。话不多说，请关注我们的后续行动。特别欢迎各位朋友的主动式参与，惊喜就在其中。\n\n关注我们的团队博客：https://github.com/ant-ued/blog/issues\n\n关注我们的微信公众号：\n![](https://os.alipayobjects.com/rmsportal/iGEFtEmkNabgVPH.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/223',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/223/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/223/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/223/events',
    html_url: 'https://github.com/lifesinger/blog/issues/223',
    id: 109045121,
    node_id: 'MDU6SXNzdWUxMDkwNDUxMjE=',
    number: 223,
    title: '几缕代码与闲思',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 46,
    created_at: '2015-09-30T09:00:27Z',
    updated_at: '2019-01-21T06:42:36Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![](https://t.alipayobjects.com/images/rmsweb/T1Hc4iXdFeXXXXXXXX.jpg)\n\n早上起来，窗外斜风细雨，这是杭城最好的季节。雨味夹杂着桂香，有一丝醉人，也有一丝恼人。雨停，能骑车上班，就是莫大的喜悦。\n\n（一）\n\n喜欢骑车，一路听歌，什么都不想，无拘无束。越来越觉得，活着最难得的，是内心的一份真喜悦。太阳从云层出来，落下一朵朵树荫，小憩的身体微微冒着热气，活力涌动，是那么美好。\n\n公司刚搬到新大楼，一切都是新的，一切又都是过往的延续。这些天最爱的是泡一杯绿茶，静坐一隅，舒舒服服写代码。一个工程师，是否真的喜欢写代码，就看其一个人时、在一个长长的假期里，能否安静又充满饥渴地写下一行行代码。\n\n就如喜欢旅行的人一样，一到假期就坐不住。去往各地，看风景、赏人文，与不同的人或最亲密的人一起走过一段段路。写代码也是一种旅行，GitHub 上景点繁星满天。\n\n最不喜的是旅游，走马观花看过很多代码仓库，读读 README 跑跑 DEMO，只要时间稍长，最后的收获是然并卵。旅行比旅游好点，会 clone 下来，读读源码、仔细用用，甚至踩上几个坑。经常去旅行的人，会上瘾，容易变成文艺青年。然而文学有情、艺术无价，文艺却是经常有毒的。比如这段略带文艺的话就是有毒的，会让文艺青年们微微泛起怒意，失了平和。\n\n我向往并尝试践行的是旅住。文艺青年最常犯的错误，就是把旅行中看到的风景，认为是常态，自以为了解，实则是众多不了解。程序员这个圈子，最佩服的是能选择一个个岛屿去旅住的人。能在某个领域，不是花一周两周，而是花上五年十年，居住下来，沉寂下来，若不是工程界的大牛，就是学术界的大拿。\n\n我这么一个人，很奇怪的一个人，就这么简单的，想回到代码的王国里，一直旅住下去。\n\n（二）\n\n公司新大楼与老大楼，只隔了几百米。中午外出觅食，与未搬迁之前比，可选择的地方，突然之间就好像完全变了。环境对人的影响，比想象中大很多。\n\n两年前开始带团队。收获了很多，也丢失了很多。管理，最重要的，并非是管人，也不是理事。管理是搭台子，是造环境，是让在环境中的每一个人，都能发挥出最大的价值。企业文化、组织结构、产品策略、项目管理等，如果不能让一线伙伴从内心里真心认可，就很难长久。高执行力的军队能拿下江山，但经常守不住江山。\n\n技术团队最大的危机，经常来自 Leader 的老去。当一个 Tech Leader 质疑 SVN 与 Git 哪个好时，这个 Leader 就在老去。理性并非总是必要，打败理性的往往是感性。感性的选择源自于真实的旅住。当你去新岛屿住过一段时间，如果新岛屿好出一个量级，往往就不会再想回旧岛屿住了。Node、React 等，都是一个个新岛屿。Leader 的老去，就是渐渐丧失了旅住的能力，这样也就再也难以带领团队去往远方的远方。\n\n技术人员的发展，最难的是突破自己的迷障。突破口不在他人，就在自己。自己能否把关口趟过去，能否始终保有旅住的能力，能否静心，这些，是真正需要花大力气去关注与投入的。而不是人际交往，不是管理技巧。\n\n当内心感觉有些不对的时候，往往就真的不对。面对这种不对，内心里往往清晰应该怎么做。一个人最需要说服的是自己，而不是他人。内心笃定，就会有能量场，就会让身边的人相信，并开始一起行动起来。\n\n各有各的人生，去欣赏。同时走自己的路，不犹疑。\n\n（三）\n\n金秋飘香，天黑得很快。\n\n这个年代，说大话容易，高大上的言谈并不难，难的反而是敢于说小话。很佩服能说大话、也敢说小话的人，说小话时，还能让大家感觉不是小家子气，而是人性，是接地气。这份心力，着实不易。\n\n我怕成为不是我，越有欲念去把这篇文章写出来，就越多杂念浮现。想写，却又不想写，一切那么简单直白，写下来却很可能引起不少人对我的误解，写还是不写？我又是谁？一个朋友说，希望自己不惑、立且定，如果不惑的本体就是惑本身，那么一切都是空，又该如何？\n\n很怕用幸福这个词，更想着喜悦。如果能让自己的心，让所处的环境，让我爱的、和爱我的，能无时不刻处于宁静与喜悦之中，此生足矣。\n\n玉伯\n2015.9.30  杭州西溪\n\n---\n\n欢迎关注「探索时间」，探索有趣的事，遇见有趣的人。\n![](https://t.alipayobjects.com/images/rmsweb/T1CIhiXgJkXXXXXXXX.jpg)\n（可以扫描二维码，也可以微信上搜索 tansuo-time 关注）\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/212',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/212/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/212/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/212/events',
    html_url: 'https://github.com/lifesinger/blog/issues/212',
    id: 77171580,
    node_id: 'MDU6SXNzdWU3NzE3MTU4MA==',
    number: 212,
    title: '去相信什么',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 22,
    created_at: '2015-05-17T00:47:25Z',
    updated_at: '2016-01-30T10:19:43Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![](https://t.alipayobjects.com/images/rmsweb/T13StfXnlrXXXXXXXX.png)\n\n最近知乎上阿里的讨论比较多，HR 事件、新人破冰、马云谈离职等，甚至有个贴在讨论「在阿里实习了一段时间，光看内网的负能量，要不要考虑毁三方」。对于老一辈阿里黑们，价值观与人生观等都已定型，没啥可去讨论。但学校的小鲜肉们，居然会因网络上的一些言论，来决定自己的职业去向，实在让我忍不住写下这篇文章。\n\n这次的 HR 事件，远没有网络中传言的那么跌宕起伏。我知道的故事很简单：员工 A 在团队里的工作表现不好，A 的主管 B 清楚这一点，但平时跟 A 关系很好，碍于面子一直不敢说破。终于在一个风轻云淡之日，B 鼓足勇气准备挑破，结果 A 说准备离职去创业，B 立刻轻松了下来，顺水推舟祝福 A 创业成功最终也没有挑破就结束了谈话。接下来的故事大家比较清楚，HR 将与主管谈话得到的信息录入了离职系统，结果系统有 bug， 员工 A 看到 HR 的离职评价后非常不爽，于是在内网发贴吐槽。槽贴很快变成了神贴，各种讨论，非常活跃，特别是当离职系统的研发人员因为 bug 被记过处分时，一大堆程序员义愤填膺不满同行背黑锅。接着，内网的讨论，流传到了知乎等外网上，马云和 Lucy 也就此事件在阿里组织部大会上发表了看法。\n\n人事无小事。正因为这一点，很多年前，Lucy 就确定了阿里内网的两个铁律：\n\n1、内网发帖必须实名，敢说就要敢当。\n2、内网发帖会永久保存，不允许删帖。\n\n我不知道有几个公司的内网能做到如此坦荡透明，有几个公司的内部文化可以让员工想说啥就能说啥（薪资等高压线不能碰）。Lucy 坚持的是，有阳光就会有阴影，但即便是毒瘤，也需要放在阳光中来看。\n\n因此内网的神贴，我一直感觉是一个公司非常健康的象征。我在阿里内网也发过神贴，至今活得好好的，甚至得到了马云的亲自回复与电话道歉。如果阿里内网，没有神贴了，或者在知乎等网络上，看不到阿里的负面消息了，那才是一件非常可怕的事情。\n\n回过头来看这次 HR 事件，罪魁祸首在源头，是管理失职。主管 B 不敢直接跟 A 说你不行，你在团队中是最差的，如果不走，很可能下一次被淘汰。主管 B 太孬了，缺乏担当。公司的处理很公正，给主管 B 记过处分。HR 也有错，也被处罚了。至于离职系统的研发人员，很简单，线上故障特别是涉及数据泄密，本来就是要担责的呀。一事归一事，很佩服这次事件的处理方式，坦荡而清晰。\n\n关于阿里新人破冰的传言，更是夸大的不是一点点。在阿里七年了，待过的团队也不少，包括被外界传言最「黄」的 UED 团队。但是，从来没遇到过侵犯隐私的行为。有时的确会问「三初」问题，但只要你选择不回答，没人会逼你。破冰在公司里，一直强调不可低俗化。我也好奇外网上传说的哪些低俗破冰，究竟是什么团队。技术团队，破冰现在差不多就是个人介绍与才艺表演（没才艺的，偶尔会被真心话大冒险，但完全可以拒绝回答）。\n\n对于网络言论，一定要有自己的判断。这个世界，每个人都很聪明。真相很少存在于网络言论中，真相活在现实中，在沉默的大多数人的心中。\n\n题图来自网络。通过网络可以获取到很多知识，但网络上的不少言论，更像是题图中的那只手，会遮挡你的视线，让你看不清事实。\n\n我说的都是对的。\n\n玉伯\n2015.5.16  杭州三墩\n\n---\n\n欢迎关注「探索时间」，探索有趣的事，遇见有趣的人。\n![](https://t.alipayobjects.com/tfscom/T1YlRfXndXXXXXXXXX.jpg)\n（可以扫描二维码，也可以微信上搜索 tansuo-time 关注）\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/210',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/210/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/210/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/210/events',
    html_url: 'https://github.com/lifesinger/blog/issues/210',
    id: 73196330,
    node_id: 'MDU6SXNzdWU3MzE5NjMzMA==',
    number: 210,
    title: '探索初心',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 7,
    created_at: '2015-05-05T03:47:33Z',
    updated_at: '2018-01-20T06:22:13Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![](http://mmbiz.qpic.cn/mmbiz/DFAV2KytcbUq1NrqYJUncEcbguuYMrHkaKtCDV7zsJk76buTic0wXN1pYwMQlLFzKe6pscATHyacwN33e2jvaUg/640?wx_fmt=jpeg&tp=webp&wxfrom=5)\n\n这个账号注册一个月了，很抱歉还没发过一篇文章。原以为不太会有人关注，今晚进后台一看，已有一千多人，略感惶恐。\n\n越来越觉得文字是个很私人的东西，有如窦唯的音乐，是写给自己的。将音乐做成专辑，将文字写成文章，并非是用来寻求知音，而是通过一种仪式，沉淀为一种形式，献给的是过往的自己。\n\n这个公众号的线上载体主要会是文字。不会有励志、布道等目的性很强的内容，也不太会有技术代码、设计细节等非常具体的干货。这里有的，会是一些真实的记载。可能是一本书的读后感，也可能是大起大落后的感悟。所有文字会留下坦诚与朴实。不会有草在结籽风在摇叶，也不会有春风十里不如睡你。但可能会是钥匙精美锁好看，也可能会有穿着蓝天白云的姑娘。文字与现实之间偶尔会加层包裹，这是一种无奈，文字是很私人的东西。\n\n除了线上文字，这个公众号会尝试一些线下活动。「探索读书会」是一个起点，具体形式，请关注后续消息。\n\n取名「探索时间」，是期待自己，也期待关注着这个公众号的你，能每周留给自己一点时间，去探索一些有趣的事情，去遇见一些有趣的人。\n\n作为读者的你，我期待着你个性鲜明，敢于订阅，也勇于取消关注。很多人力赞冯唐，但我觉得那是一坨屎。很多人喜欢鬼脚七，但我读着读着感觉节操碎一地。于是就通通取消订阅。期望你也拥有像我这样的偏见，若不喜欢，就果断退订，若是喜欢，也不要到处传播，给你觉得有可能会喜欢的人推荐推荐就好。\n\n期待若干年后，依旧初心不忘。\n\n玉伯\n2015.4.29  杭州\n\n---\n\n欢迎关注「探索时间」，探索有趣的事，遇见有趣的人。\n![](https://t.alipayobjects.com/tfscom/T1YlRfXndXXXXXXXXX.jpg)\n（可以扫描二维码，也可以微信上搜索 tansuo-time 关注）\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/209',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/209/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/209/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/209/events',
    html_url: 'https://github.com/lifesinger/blog/issues/209',
    id: 73187537,
    node_id: 'MDU6SXNzdWU3MzE4NzUzNw==',
    number: 209,
    title: '一棵树的自由',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 12,
    created_at: '2015-05-05T03:03:48Z',
    updated_at: '2019-10-12T06:22:58Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![](https://t.alipayobjects.com/tfscom/T1rQ4fXcVuXXXXXXXX.jpeg)\n\n很感谢大家一直以来的关注。WTP 停止更新一年多，依旧还有上万的订阅用户，非常感恩，感谢大家。\n\nWTP 的初衷是技术、产品、自由梦。这是我工作以来的三个梦想，期待自己在技术上有所钻研，期待自己能给大家带来一两款有趣的产品，同时期待自己能获得财富自由，以及精神自由。\n\n这三个梦想不容易达成。我原以为，这是串联关系，可以达成一个后，再去达成下一个。近十年的工作，意外的发现，这根本不是串联关系，而是乱七八糟的关系。当你在某一两个技术领域持续深入（至少没日没夜写上十万行原创代码），初步实现技术梦想后，财富自由的梦可能就达成了。我理解的财富自由，不是拥有多少钱，而是拥有了持续賺钱的能力。不担心丢工作，不用看老板眼色行事，可以不想做什么就大胆不做，勤快一点就有賺钱的机会，这就是财富自由。\n\n产品梦也挺有意思。最初自己理解的产品，是类似 Google、Facebook 这种大众产品。心里痒痒的，这几年，通过公司的赛马，以及私下里的折腾，尝试过几款产品，虽未完全投入，但也算看过猪跑。把产品理解成 C 类产品，是一个心结，经常并非是对产品有多疯狂，而是对成功充满期待。回归自己的初心，产品梦想，更多是一种产品化的思维，可以用在技术上，去做技术产品，也可以用在生活上，比如做一些手工艺品。经过自己亲手的努力，一点一滴创造出来的东西，就是产品。这篇文章，也是一件产品，需要打磨、雕琢。产品是做事情的一种心态，需要远见，需要坚持，也需要细节上的匠气。有如烹饪，食材、刀功、火候等等，这些都是技术，最后炒出来的那盘菜，就是产品。要做好技术，必然需要一颗产品的心。技术梦和产品梦，是不分家的。\n\n自由梦里的精神自由，是最难最难的。最近半年，我以为我已近天命，最后却发现，我离知天命还好远好远。好多快乐都成了回忆，好多痛楚也渐渐的记不得。抬头往前，是如海一般的未知。最近有个朋友说，自由是抬头有未知低头是思念，自由是面向未来能保有各种可能性。多么文艺青年的一句话，像诗一样的句子，可是经不起咀嚼。\n\n早上骑行，路边的小树大树，各种花繁叶茂，绿的翠绿，像是会滴水，红的灿烂着红，像是新造的血，还有那白，白得让人脑海里邪念全无，像是书中的小龙女。可是就在几个月前，在那冬日里，这些树都是一叶无存。大自然对生命的坦荡、大气，每一个冬去春来，放眼历史长河，这才是地球生命的主旋律，人类那点活动，好渺小，不足言。\n\n大自然的植物，不能动，抬头没什么未知，低头更无什么思念。就那么杵在泥土里，每个冬去春来之际，开一树的繁华精彩。就这么简简单单的轮回着，看着我想哭，不是哭它，是哭自己。\n\n真想变成一棵树呀，跟着季节轮回。闻到春天的味道，就开心地开一树繁华。冬天来了，就无忧无愁地将叶散去。\n\n想拥有，一棵树的自由。\n\n玉伯\n2015.3.29  杭州\n\n---\n\n最后，附一个二维码，那是一个全新的起点，欢迎订阅。\n![](https://t.alipayobjects.com/tfscom/T1YlRfXndXXXXXXXXX.jpg)\n（也可以直接在微信上搜索 tansuo-time 关注）\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/198',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/198/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/198/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/198/events',
    html_url: 'https://github.com/lifesinger/blog/issues/198',
    id: 31227766,
    node_id: 'MDU6SXNzdWUzMTIyNzc2Ng==',
    number: 198,
    title: '微不足道的坚持',
    user: {
      login: 'jayli',
      id: 188244,
      node_id: 'MDQ6VXNlcjE4ODI0NA==',
      avatar_url: 'https://avatars3.githubusercontent.com/u/188244?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/jayli',
      html_url: 'https://github.com/jayli',
      followers_url: 'https://api.github.com/users/jayli/followers',
      following_url:
        'https://api.github.com/users/jayli/following{/other_user}',
      gists_url: 'https://api.github.com/users/jayli/gists{/gist_id}',
      starred_url: 'https://api.github.com/users/jayli/starred{/owner}{/repo}',
      subscriptions_url: 'https://api.github.com/users/jayli/subscriptions',
      organizations_url: 'https://api.github.com/users/jayli/orgs',
      repos_url: 'https://api.github.com/users/jayli/repos',
      events_url: 'https://api.github.com/users/jayli/events{/privacy}',
      received_events_url: 'https://api.github.com/users/jayli/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 48,
    created_at: '2014-04-10T09:40:33Z',
    updated_at: '2018-12-26T07:12:48Z',
    closed_at: null,
    author_association: 'NONE',
    body:
      '在你最擅长的专业领域内，可曾有过一件让你骄傲，持续坚持下来的事情？每当别人谈论它时，你总是偷偷窃喜？\n\n我曾经这样勉励我的弟兄们，在满负荷的工作压力面前，总要找到一件有意义、自己感兴趣且擅长的事情，坚持做，是一种解压，更是为了让自己的专业所长，找到有意义的落脚点。分享三件事情，大家共勉\n### 第一件事：\n\n两前年，流火曾经找我聊想搭建一个行业内前端社区，他有清爽的界面，有优雅的交互体验，我当时并不看好，担心接下来的工作压力会让人抗不住，两年过去了，在百度搜索f2e可以在显要位置看到这个极简的域名"[f2e.im](http://f2e.im)"。社区雏形完整，代码完全开源，我也很幸运成为F2E社区[第三号成员](http://f2e.im/u/jayli)。\n\n我当然听到过太多质疑的声音，诸如"这东东和某东东很类似？"，或者"这里菜鸟太多了，没有我想要的高手？"云云。\n\nWhatever!~\n\n评论终将归于浮云，留下的是两年的坚持，以及它换来的微不足道的满足感！同样，当流火在解决了成百上千个无关紧要又繁琐冗碎的bugfix时，换来了对python的精通，对代码版本迭代的专业性把握，对网络协议和内容渲染模式的深刻理解，收获了直面一线用户的宝贵经验，更重要的是，懂得坚持的意义。这些硬技能直接促成了今天流火在业务上的钻研与精通。\n### 第二件事：\n\n前年年底，我们团队发起了针对校招同学的"[魔鬼训练营](http://wiki.ued.taobao.net/doku.php?id=ued.bj:f2e:%E9%AD%94%E9%AC%BC%E8%AE%AD%E7%BB%83%E8%90%A5)"，宗旨是艰苦一年，主动成长，我们无条件的侵占了大家的加班、午餐、晚餐、甚至周末时间。工作的紧张压力下，还要准备给大家反讲，质量良心保证，精力严重透支，要不是靠着年轻的身子板，扛下来简直是个奇迹。\n\n迟伤、影逸、夕剑 全程坚持了下来。\n\n当年反讲的JavaScript设计模式、熟读W3C标准、NodeJS、Git、字符编码、HTTP协议这些基础知识，让充电加速。现在当面对业务压力和未知bug时，他们显然更勇于去透过表面看本质。并在 WebRocket（@影逸）、机票YUI体系的KISSY化（@迟伤）等项目中淋漓紧致的体现出自身专业水平。毕业一年，无压力的开始挑大梁了。\n\n回想起来，魔鬼训练营中辛苦的坚持，是如此微不足道。\n### 第三件事：\n\n两年前，我作为PM落地了一件看似不可能完成的任务，[JavaScript权威指南（第六版）](http://ued.taobao.com/javascript/)的翻译。认领这个任务的初衷仅仅是想挑战下自己的能力极限，看清楚自己几斤几两，没想到一做就是一年。\n\n这段时间在工作和业余时间谨慎的保持平衡，压力面前各种放弃的冲动仍历历在目，但仍抵不过这本书上市之时的那股满足感。\n\n过程中听到太多质疑的声音，WhatEver，你所掌握关于JavaScript的一切，始终是我的子集。纯技能上的收获更是大大的丰厚。\n### 结语\n\n任何一件事情，有多大投入，就有多大收获。当你还是局内人时，不清楚傻傻的坚持的意义，这时内心的纠结最容易让人动摇和放弃。但事成之日，才会真正拨云见月，一树百获。这时，压力是浮云，纠结是浮云，抱怨是浮云，斤斤计较更是浮云。“坚持到胜利”，是如此言轻，又是如此言重。\n\n在你最擅长的领域内，可曾有过让你骄傲，持续坚持下来的事情？每当别人谈论它时，你总是偷偷窃喜？那么。。。\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/194',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/194/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/194/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/194/events',
    html_url: 'https://github.com/lifesinger/blog/issues/194',
    id: 29184537,
    node_id: 'MDU6SXNzdWUyOTE4NDUzNw==',
    number: 194,
    title: '写给一名求职者的信',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 38,
    created_at: '2014-03-11T14:50:26Z',
    updated_at: '2018-03-22T12:38:39Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![screen shot 2014-03-11 at 10 48 03 pm](https://f.cloud.github.com/assets/97227/2386452/43544fb8-a92c-11e3-94f2-5c62ddffdfc0.png)\n\n很高兴你能来面试，先告诉一个好消息：面试已经通过。在你选择来之前，还有些信息需要给到你：\n\n1、大公司的环境可能远不如小公司自由。大公司的大，意味着有很多很多部门，彼此协作才能把事情做好。阿里也避免不了大公司庞大的组织架构，但一定程度上这也是生态进化的当下最优结果。阿里更像一个江湖，崇尚侠义、公正、透明，但也避免不了地盘、纷争、残酷。如果你选择进来，要有一定心理准备。大环境不会是你想象中的那么好，当然，也不会那么糟。\n\n2、我相信你的编码能力，但更看重的是你的视野、沟通、心态等综合能力。虽然我现在将整个部门改名为体验技术部，也有长期打算组建产品创新、孵化等实体小组，但现阶段，整个部门的主要职责依旧是负责公司各项产品的前端研发。在前端部门，我不愁你找不到志同道合的人，但我担心你们是否有足够的勇气去创造变化，有足够的耐心去孵化时机。老实说，我们团队里，曾有过不少像你这样才华横溢的同事，但在工作一年两年后，不少人依旧选择了离开，选择去更自由的小公司发挥所长。大公司的变化总是会比较慢，因为大公司承载了太多人的梦想。互联网金融，甚至还承载了全国人民的梦想。我们都希望快点，但怎么才能快起来，怎么才能在公司范围内营造真正创新、自由的氛围，至今整个阿里并未找到满意的答案。\n\n3、具体到全栈工程师，可以看我博客（ http://lifesinger.github.io/?185 ）里的理解。目前更多是团队的一个方向。这个发展方向的目的，也不是为了全栈，而是为了效率、为了创新、为了能解决目前支付宝研发体系下的诸多问题。这条路很长，支付宝才刚起步，前端的作用是撕开一个口子，后续要跟测试去谈、去跟 PE 协同、要 SQA 的同意，要聚集一群人，同时要说服一堆一堆人，没有容易的事情，非常难。全栈方向，我 10 年就想尝试，但直到今年，三年之后的今天，才能聚集一些兄弟，才能说服技术部老大让我们去尝试。要把支付宝整站改成 Node 架构，让前端直接能基于 Java 服务搞定所有开发，路还很长很长。\n\n4、很久以前在博客中，我说我的梦想是技术梦、产品梦、自由梦。现在越来越觉得技术梦和产品梦是可以合二为一的。技术要往深里钻，本身就需要用做产品的心态去做。Linus 在我看来，最强大的不是他的代码能力，而是他的技术社区管理能力，以及对技术产品的眼光和设计能力。在我们团队，一直鼓励的是技术人的产品心态，无论是 Sea.js，还是 Arale、Alice 等技术产品，我们都期望大家有产品心态和持久坚持的能力。最近的一个例子是  http://totorojs.org/ ，从有想法到做成现在这个小工具，我们花了一年多时间。下一步想做 UI 自动化兼容测试，更加艰难。\n\n5、技术和产品梦可以结合的第二点，是因为大公司里的产品创新，需要技术的良好土壤。前端说的全栈、前后端分离等等，所有这一切，都是为了能让我们的产品想法能落地，能快速试错。团队里曾有一个小伙子，他想把支付宝重做一遍，但在现有技术体系下，这只能是一个很难很难实现的「梦」。但我希望通过技术革新，后续我们真有机会去「重做支付宝」。我们很希望能有一个互联网的金融技术平台，基于这个平台，各种理财、金融类创新产品，我们自己就能发起、主导并推动实现和落地。公司鼓励从下自上的创新，但如何让这种创新能脚踏实地，如何让技术能承载创新，这一切都还需要努力。\n\n如果你有足够的勇气、耐心，敢于舍得，同时有长久的追求，我希望你能加盟我们。我们并不是精英团队，精英团队也不是我们的目标。我们的梦想是自由，自由的做技术，自由的做产品，自由的生活。无论是精英，还是大众，都能发挥所长，实现自由的梦想。\n\n期待你的加入，相信你在做心的选择。\n\n（完）\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，每周推送至少一篇原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/189',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/189/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/189/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/189/events',
    html_url: 'https://github.com/lifesinger/blog/issues/189',
    id: 27222804,
    node_id: 'MDU6SXNzdWUyNzIyMjgwNA==',
    number: 189,
    title: 'MOOC 介绍',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 8,
    created_at: '2014-02-09T13:39:09Z',
    updated_at: '2015-03-31T09:41:45Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![](http://ww3.sinaimg.cn/mw1024/68361562gw1eddgmdu1b6j20iw0dqaaz.jpg)\n## 概念介绍\n\nMOOC（Massive Open Online Courses）是大规模在线开放课程，简单来说就是把各学校的课程放到互联网上，对所有人开放共享。\n\nMOOC 是一个理念，就如 Open Source 一样，与之对应的是传统学校授课方式。MOOC 的理念雏形，历史可追溯到 1890 年代。MOOC 正式提出是在 2008 年，之后特别是 2012 年发展迅猛。\n\n目前提供 MOOC 课程的优秀网站有：\n1. https://www.coursera.org/  --  拥有大量合作机构、课程最多\n2. https://www.udacity.com/  --  有不少计算机类课程\n3. https://www.edx.org/  --  哈佛、麻省理工、伯克利等大学在这里，拥有著名的 CS50 等课程\n4. https://www.khanacademy.org/  --  可汗学院，拥有很多理工科课程\n\nCoursera、Udacity、edX、Khan 与哈佛、斯坦福、普林斯顿等著名高校合作，推出了一系列高质量课程。以 Coursera 为例，目前合作机构超过 100 个，包括北京大学、 台湾国立大学、东京大学等，总课程有 500 多个，内含不少中文课程。\n\n国内也有跟进者：\n1. http://xuetangx.com/  --  清华大学基于 OpenEdX 搭建的平台\n2. http://mooc.guokr.com/  --  果壳出品的 MOOC 学院，以信息聚集为主\n3. http://open.163.com/  --  网易公开课\n\n英国、德国、澳大利亚等国也涌现了不少优秀 MOOC 网站，可参考： http://www.36kr.com/p/208630.html\n## 课程特点\n\n在国内，很多人可能通过网易公开课欣赏过哈佛等名校的课程。到目前为止，网易公开课的形式依旧是视频，缺少其他辅助。Coursera 等网站在课程设计上非常花心思，已经逐步形成了真正的在线课程：\n1. **课程规划**。有开课周期，就像在大学选修一样，有些课程错过了，就只能等下一期。\n2. **资料齐全**。提供授课视频、字幕、授课资料、参考书籍等，大部分可下载离线反复学习，非常方便。\n3. **学习过程**。资料是逐步放出来的，看完视频后有小考，每周有作业，就像在大学一样。\n4. **学习社区**。拥有真正的社区，热门的课程经常有几千人参与。教授，牛人、全球各路大虾云集。\n5. **证书激励**。有期末考试，通过的还会颁发证书。据说这个证书，Google 等企业会认。\n\nMOOC 越来越像真实的课堂，汲取了大学课程设计的很多优点，同时利用互联网，向全世界开放。\n## 盈利模式\n\n截至 2013 年底，Coursera B 轮融资已达 6300 万美元。站在使用者的角度来看，MOOC 网站的盈利模式至少有以下几项：\n1. **收费课程**。目前已有不少收费课程，几十美刀一门课。与线下大学相比，这是白菜价。只要能学有所得，用户就很愿意付这笔钱。\n2. **猎头服务**。与 Google、Facebook 等合作，直接将课程学习优异者推送给企业。现在已经有学生在简历上自主写上在线课程的学习分数。\n3. **职业培训**。比如 Udacity 将重心放在了科技行业的职前培训。在国内，做好的话或许能抢下北大青鸟不少份额。去做职业培训的讲师，或许这也是技术人员的一条不错的创业之路。\n\n整个 MOOC 行业，2012 年全球出现了 60 多家公司。Learn Capital 合伙人 Rob Hutter 预测，**全球教育市场的规模是 4.6 万亿美元，目前已有公司吃掉的差不多只有 500 亿美元，只是冰山一角，一切才刚刚开始。**\n## 最后\n\n古人说「活到老、学到老」，MOOC 让学习变得更便捷、美好。在知乎上看到过一句话：\n\n> **「在这个互联网时代，能限制住学习的只有你的求知欲。」**\n\n作为前端，还想起一件事，jQuery 作者 John Resig 从 Mozilla 辞职后，投身去了教育领域。他在的地方，就是大名鼎鼎的可汗学院（Khan Academy）。\n## 参考资料\n- http://en.wikipedia.org/wiki/Massive_open_online_course  --  MOOC 的前世今生\n- http://www.36kr.com/search?q=Coursera  --  Coursera 那点事\n- http://www.zhihu.com/topic/19793302/top-answers  --   这里能找到大量优秀课程推荐\n\nPS：这个春节才关注 MOOC，跟着 Philip Zelikow 教授学 [The Modern World: Global History since 1760](https://class.coursera.org/modernworld-002)，跟进了两周感觉很不错。**欢迎大家一起来挖掘优秀的 MOOC 课程资源，分享让世界更美丽动人。**\n\n（完）\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，每周推送至少一篇原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/188',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/188/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/188/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/188/events',
    html_url: 'https://github.com/lifesinger/blog/issues/188',
    id: 25798517,
    node_id: 'MDU6SXNzdWUyNTc5ODUxNw==',
    number: 188,
    title: 'QCon 出品人采访稿',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 9,
    created_at: '2014-01-17T10:22:24Z',
    updated_at: '2015-03-13T09:25:37Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![plank bridge cascille northern ireland](https://f.cloud.github.com/assets/97227/1939366/f2570546-7f60-11e3-8d8d-e1b461dd93c9.jpg)\n\n今年与三七一起，承担 QCon 北京 2014 专题出品人，关注移动时代的前端，下面是 [InfoQ 的采访内容](http://www.infoq.com/cn/news/2014/01/qconbeijing2014-yubo-interview)。\n\n---\n\nInfoQ：大家都知道您是您作为支付宝前端开发团队负责人，淘宝前端类库KISSY、前端模块化开发框架SeaJS、前端基础类库Arale的创始人，不过还是请您重新介绍一下自己，及这三个项目现在的情况吧。\n\n玉伯：\n\n> 我的情况比较简单，03年毕业，在北京漂了5年，08年到杭州加入淘宝，12年转岗到支付宝，现在负责支付宝共享平台的前端技术团队。\n> \n> 在淘宝期间，业务需求需要做一个富文本编辑器，于是有了KISSY Editor，后来做着做着就变成了一个前端基础类库KISSY，editor是其中一个组件。11年开始，KISSY的主要开发工作已移交给同事承玉。现在已经有一个专门的虚拟团队维护，负责人是拔赤。\n> \n> 2010年期间，有关注Node.js和CommonJS社区，了解到当时的风云变幻。强烈觉得模块化开发理念不仅需要规范化、更需要扎扎实实的实现，当时有FlyScript、BravorJS、RequireJS等种种实现。个人不是很喜欢RequireJS的一些理念和实现，喜欢的FlyScript则自我阉割了，因此萌生了自己写一个的想法，这就是Sea.js。Sea.js已经发展到2.x版本，在国内使用比较广泛，阿里、腾讯、中航信等公司都有采用。Sea.js的核心理念是保持简单，只做该做的。目前Sea.js 3.0的规划已经有了雏形，会进一步简单，包括构建。\n> \n> 2012年到支付宝后，支付宝已经有了一套前端基础类库Arale 1.1，因此我并不是Arale的创始人。Arale 1.1的思路与KISSY、YUI等类库差不多，都是从底层组件做起，很辛苦很累，但效果并不太好，在可维护性、易用性等方面，自己做的dom、event等组件，经常不如业界已经成熟的jQuery等类库好用。为了解决这些痛点，当时和同事商量后，就有了Arale 2的想法。Arale 2的核心是开放。开放的第一层是拿来主义，业界已经有的成熟方案，经过我们考察后，直接引入进来用。拿来主义直接让我们站在了巨人的肩膀上，并能以此做为基础，迅速构建适合支付宝的一套UI组件库。从狭义上讲，Arale是为支付宝量身定做的，并不适合直接拿去给其他公司用。从广义上讲，Arale是构建前端基础类库的一种开放式方案，这种方案可以被其他公司借鉴。目前已有不少团队基于Arale方案构建出了适合自己公司业务的特定类库。Arale目前的规划有两个方向：1）进一步拥抱社区，废弃CMD，拥抱CommonJS，Arale组件的模块将直接与一个Node模块无异。2）基础组件的Mobile First化，为移动基础类库的构建提供体系化方案和最佳实践。\n> \n> 对前端开发来说，前端基础类库很重要，但从整个前端领域来看，类库依旧是比较小的一块。还有很多领域非常值得投入，下面有时间再说说。\n\nInfoQ：（谈到负责支付宝的前端团队后）阿里内部团队众多，能否讲讲支付宝前端团队的开发流程和特别之处？\n\n玉伯：\n\n> 从前端开发来看，阿里内部分三种类型：淘系、支付宝系、B2B系。B2B系没亲身体验过，略过不说。淘系和支系的区别比较明显，简单说下。\n> \n> 淘系的核心业务是「导购」，业务的定位使得淘系大量前端业务以前台展现为主。这类业务，快是第一用户体验。快不仅是页面速度快，也包括研发交付速度要快。也会有功能交互很复杂的业务，但相对来说不是很多。\n> \n> 支系的核心业务是「支付」，有段时间也有「导支」业务，但很快成为非主流。「支付」是功能型的，与用户资金相关，「稳定」、「安全」是第一用户体验。当然也求快，但在稳定、安全面前，快经常要让道。支系还有两个重点是金融与数据，与支付一样偏功能性。\n> \n> 业务类型的不同，使得淘系、支系的技术体系、研发交付有比较大的差异性。淘宝求快，支付宝求稳。目前支付宝也在探索更适合互联网的快速轻量级研发模式，淘宝在稳定、安全上的要求也越来越高。像是两个极端，在互相借鉴互相靠拢，差异性应该会长期存在，但会逐步减少。\n\nInfoQ：目前您最关注的重点是什么？\n\n玉伯：\n\n> 目前最关注的是团队管理。从带几个人，到突然带几十人，压力很大。除了自己的个人生活，最在乎的就是这帮兄弟姐妹的未来。目前团队缺口还很大，近期大量招聘中，职位不限于前端开发，也希望有 Node、Java、iOS、Android、交互、视觉等经验的人员加入。\n> \n> 你瞧，又广告了。最近晚上做梦都在关注招聘，有个同事说我近期三句不离招聘，欢迎投递简历。\n\nInfoQ：您感觉在过去一年中，前端领域是否发生了令人值得注意的变化？\n\n玉伯：\n\n> 变化太快了，好多变化。百度的berg总结过一篇2013前端技术盘点，说得很全面。对支付宝来说，最大的变化有：\n> \n> 1、**全端化**。前端不再是折腾各种浏览器了，而是需要面对PC、Pad、Phone甚至TV等各种端。支付宝的做法很干脆实在，直接让一批前端开发转岗到无线部门做iOS开发。前端部门自身也需要逐步具备跨终端开发的技能。这是移动互联网带给前端最大的冲击，却也是最好的礼物。\n> \n> 2、**全栈化**。Node的兴起和成熟，让前端在解决研发效率等问题上有了新思路。阿里的整个技术体系是基于Java的，前后端的职责分工一直存在灰色地带，特别是在支付宝，厚重的开发环境已经对前端研发效率带来严重影响。在这种情况下，如果能基于Node实现前后端运行与研发过程中的清晰分离，将会带来研发效率上的大提升。全栈不是为了技术的全面，而是从职责分工上能让更合适的人干更合适的事。\n> \n> 3、**工程化**。前端开发越来越复杂，除了运行时的类库框架，还有非常非常重要的一块是研发交付体系。这一块各个大公司的前端都在探索，各个公司都有大量实践，但感觉都还存在很多优化甚至突破的空间。支付宝的研发交付体系好像是阿里最复杂的，前端一方面「享受」这种复杂性带来的稳定性保障，同时又非常「痛恨」如此让人抓狂的各种平台、流程。前端的工程化开发是一个体系化的问题，相信2014年，支付宝前端在这一块会有飞跃式突破。\n\nInfoQ：您是此次“移动时代的前端”专题联合出品人，能否谈谈你对此次专题的内容策划？（谈谈为什么你认为这个话题是重要的、值得关注的？听众可以从这个分享中获得什么等等）\n\n玉伯：\n\n> 内容策划上，就是上面说的全端化、全栈化、工程化。筛选的话题，会来自大公司，也会来自创业公司。全端化是移动互联网对企业的需求。全栈化、工程化都是对研发效率的关注，这一块的进展，能让互联网公司特别是大公司的传统研发模式发生变革，让分工更合理，研发效率更高。\n\nInfoQ：（在上面的内容提到全端开发的概念后）您对“全端开发”这个新概念怎么看？\n\n玉伯：\n\n> 上面已经提到这些概念了。全端我的理解是跨终端，从浏览器兼容，走向各种终端的兼容。你想谈的应该不是这个，而是 FSD（Full Stack Developer）。\n> \n> Full Stack 有些地方翻译成全端，我更喜欢翻译成全栈。知乎上有过讨论，感觉大家对全栈的理解有很多差异点。我的理解与大家的有些不一样。\n> \n> 1、全栈不是什么都懂，而是鼓励大家从单一（ | 型）人才变成一专多能（T 型）人才，进而变成多专多能（ π 型）人才。\n> \n> 2、对于前端的全栈之路，在支付宝是鼓励大家通过Node掌握服务端上的UI Layer层开发，是让前后端的分工更合理，并非是让前端去研究后端的专业领域。表面上看是分久必合、合久必分，实际上是分工更合理，让前后端都能朝着更专业的深度发展。\n> \n> 3、全栈开发应该根据不同场景去定义。支付宝的全栈，跟Facebook的，目前就不一样。中间没有谁好谁坏，都是从业务实际需求出发，以及团队目前的人员情况出发，自然而然地一种选择。\n\nInfoQ：在前端开发以外，您是否还有关注的技术领域？为什么？\n\n玉伯：\n\n> 技术领域这几年都放在前端了，对动漫制作、数据挖掘有浓厚兴趣，但尚未投入大量时间。技术领域之外，最关注团队管理，越来越发现很多事情靠一个人无法达成，个人英雄主义时代已经很遥远。在当下，要达成一些心中想做的事，要倚靠团队的力量。自己的定位依旧是技术专家，但同时希望自己能具备leadship，这样才能达成自己心中的梦想。\n\n（完）\n\n---\n\n特别欢迎中小型创业公司推荐讲师，如果有合适的，请毫不犹豫联系我。希望这个专题不仅有大公司的经验，也能看到大量创业公司的身影。期待你的参与和精彩。\n\n最后，期待你的留言，说说读完这篇采访稿的感受。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，只推送原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/187',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/187/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/187/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/187/events',
    html_url: 'https://github.com/lifesinger/blog/issues/187',
    id: 25727036,
    node_id: 'MDU6SXNzdWUyNTcyNzAzNg==',
    number: 187,
    title: '补码之美',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 28,
    created_at: '2014-01-16T14:10:44Z',
    updated_at: '2015-08-31T12:46:40Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![screen shot 2014-01-16 at 9 59 26 pm](https://f.cloud.github.com/assets/97227/1930987/80308c3e-7eb7-11e3-9880-9de6cbe627c1.png)\n\n在计算机中，为什么 -1 要用补码表示为 1111 ?\n\n首先要了解 CPU 的基本单元 ALU 模块。在 ALU 里，加法是最基本的运算。通过程序，乘法可以转换为加分，除法可以转换为减法。补码表示，则可以让减法直接转换为加法。这样，ALU 核心只需要加法器就好，加法器可以通过集成电路中的晶体管来实现。\n\n要将减法转换为加法，在数学公式里，只要加一个括号即可：\n\n```\nX - Y = X + (-Y)\n```\n\n在 CPU 里，如果想让加法器具备减法功能，核心是负数如何表示。\n## 原码\n\n大自然赐予了我们硅，硅是很稳定的半导体，通过 PN 结等精细工艺，可以做成各种晶体管。在晶体管的世界里，基本状态只有 on 和 off 两种，也就是只有 \n1 和 0。于是，在计算机里，我们采用二进制来表示整数。\n\n这样，最自然的想法是，对于正整数来说，直接从十进制转换成二进制就好。比如 1 用 0001 来表示，2 用 0010 来表示。\n\n负整数怎么来表示呢？增加一个符号位来表示？比如二进制的最高位为 0 时表示正数，为 1 时则表示负数。\n\n这样，-1 用 1001 表示，-2 用 1010 表示。这就是原码的概念。\n\n在原码的表示里：\n\n```\n1 - 1 = 1 + (-1) = 0001 + 1001 = 1010 = -2\n```\n\n显然，原码表示法，不能把减法变成加法，悲催。\n## 补码\n\n据说，所有科学问题，最后都是数学问题，而所有数学问题，最后都离不开哲学。\n\n哲学太深奥了，我们来看看从数学上，如何把 X + (-Y) 转换成二进制相加。\n\n我们希望有某种表示方法，使得 1 + (-1) = 0000  现在 1 用 0001 来表示，-1 应该怎么表示？\n\n```\n-1 = 0000 - 0001\n    = 10000 - 0001  （高位借一）\n    = (1111 + 0001) - 0001\n    = (1111 - 0001) + 0001（第一步：取反）\n    = 1110 + 0001（第二步：加一）\n    = 1111\n```\n\n也就是说，如果 -1 用 1111 来表示，则 1 + (-1) 的二进制表示通过加法就能进行减法操作，达成了我们最初的目的。\n\n进一步，针对所有负整数：\n\n```\n-Y = 0000 - Y\n     = (1111 + 1 ) - Y\n     = (1111 - Y) + 1   将正整数 Y 的二进制先取反、再加一\n```\n\n整数转换成二进制后，先取反，再加一，这就是负整数的补码表示。正整数的补码跟原码一样。\n\n到此为止，补码的前世今生就说完了，但还有些有意思的事情。\n## 简单之美\n\n可以说，补码的出现，是为了能让 ALU 在设计时更简单：只需要加法电路就好，不需要减法电路。追求简单，极致的简单，这能给性能、工业化等带来很大价值。\n\n再从数学上来看，整数遵循一些很容易被我们忽略的重要规律：\n1. 数轴上，左边的数永远小于右边的数。比如 -8 < -2 < 0 < 3 < 5\n2. 数轴上，只有一个零。\n3. 相邻整数之间相差一。\n\n来看补码表示：\n\n```\n    -8      -7         -6        -5        -4        -3       -2      -1       0          1         2        3         4        5         6         7\n1000 | 1001 |  1010 | 1011 | 1100 | 1101 | 1110 | 1111 | 0000 | 0001 | 0010 | 0011 | 0100 | 0101 | 0110 | 0111\n```\n1. 只看负数的补码表示，明显 1000 < 1001，补码表示下，左边的负数很自然小于右边的负数。\n2. 很明显只有一个零，就是 0000，不存在 -0 跟 0 的表示不一样。\n3. 再看相邻整数之间，左边的整数加一，就是右边的整数，包括 1111 + 1 = 0000 。\n\n初看补码，有些怪异、不直观，但在二进制的世界里，补码是如此自然。第一个想出用补码来表示整数的人，真是个天才啊。\n\n（完）\n\n题图：世界有 10 种人：一种懂二进制，一种不懂。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，只推送原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/186',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/186/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/186/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/186/events',
    html_url: 'https://github.com/lifesinger/blog/issues/186',
    id: 25724757,
    node_id: 'MDU6SXNzdWUyNTcyNDc1Nw==',
    number: 186,
    title: '我感受到的阿里',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 21,
    created_at: '2014-01-16T13:31:46Z',
    updated_at: '2018-05-16T04:54:43Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![circles](https://f.cloud.github.com/assets/97227/1930637/ce77c562-7eb0-11e3-8fb9-92d876658537.jpg)\n\n昨天吐槽了下微博对微信的屏蔽，结果引来不少评论，从评论里感受到好多人对阿里并不了解。最近每天回到家都比较累，就写写 WTP 放松放松吧。\n\n如果用一个词来形容阿里的话，个人觉得最贴切的依旧是「江湖」。江湖很大，有各门各派。阿里内部正式员工满一年后，可以比较自由地转岗。可以在少林寺砍几年柴，然后再去武当山挑几年水。每个事业部、每个团队的风格都会有些不一样。一样的是价值观，是做人做事的基本原则。\n\n外界很多传闻说进入阿里首先要被「洗脑」。所谓的洗脑，是加入阿里后，要参加为期一周左右的培训。培训中有价值观的讲解。阿里的基本价值观是六脉神剑：客户第一、团队合作、拥抱变化、诚信、激情、敬业。这几条价值观，如果不在阿里，去 Amazon、Google、腾讯、百度等，据我了解其实都差不多。客户第一是商业公司本就应该恪守的。团队合作也是基本要求，公司毕竟不是一个人。拥抱变化可能是阿里特有的。唯一不变的就是变化，组织结构的调整、产品定位的变化、市场形式的变幻等等，阿里员工面对种种变化时，要求能积极面对、主动拥抱。诚信、激情、敬业是一个员工的基本素养。还没看到过一个公司，要求员工不诚信、没激情、不敬业的。如果这就是「洗脑」的话，我觉得多洗洗也无妨。就如小学老师教我们要学会孔融让梨一样。如果你不认可孔融让梨的寓意，很可能只代表你是一朵奇葩，或者是你为了标新立异而故意反对，并不代表你的真实内心。\n\n我在微博上发了那条吐槽后，不少评论觉得我是不是不想在阿里活了，或者还想不想拿马总的红包。看到这些评论，真心觉得大家太以小人之心度君子之腹。马云是不是君子我无法判断，但跟马云有限的几次接触里，让我不太担心这种吐槽会带来什么不好的影响。2010 年时，曾在阿里内网上发过一个神贴，神贴内容不多说，总之触动了很多高层。两年后，这神贴不知道怎么又被挖坟出来。然后马总看到了，以为是最近的事，于是回复了我，回复得有些没道理。于是我回复了马总，指出马总不光看错了时间，还缺乏道理。后来让我没想到的是，马总亲自打电话给我道歉，说没看清是挖坟贴，想错了，对不起。\n\n我不知道有多少公司让员工有机会发神贴？阿里内网的神贴每年都有，绵绵不绝。在我看来这是一种开放，真心的开放。爱的反义词不是恨，而是冷漠。很多神贴本身是爱的体现，神贴往往是爱到绝望处的恨。最怕的是冷漠，是和谐。什么都不说、或说好的公司，往往离死亡也就不远了。\n\n我更不知道有多少公司的 CEO 会因为一个论坛回复不妥，而亲自电话向员工道歉，连续说了好多对不起，还要请吃饭。\n\n另外，在一个公司真不代表你就得处处为这个公司说话。对我来说，阿里有很多让我欣赏、留恋的地方，当然也会有让我觉得不好的地方。比如微博屏蔽微信，作为微信用户，我不赞同这种行为，但这不影响我喜欢目前在阿里的工作。\n\n（完）\n\n题图：世界是多姿多彩的，哪有那么多绝对，交织着恨的爱往往才是真爱。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，只推送原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/185',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/185/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/185/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/185/events',
    html_url: 'https://github.com/lifesinger/blog/issues/185',
    id: 25575917,
    node_id: 'MDU6SXNzdWUyNTU3NTkxNw==',
    number: 185,
    title: '说说全栈工程师',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 51,
    created_at: '2014-01-14T14:12:50Z',
    updated_at: '2019-08-27T10:20:19Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![](http://media-cache-ec0.pinimg.com/736x/5e/92/65/5e926593186d4c7475481abc632f76f7.jpg)\n\n全栈工程师（Full Stack Developer）好像突然就火了，知乎、微博上都有讨论。这个概念在 2012 年时就有提出：[What is a Full Stack Developer?](http://www.laurencegellert.com/2012/08/what-is-a-full-stack-developer/)，主要观点是：\n\n> 有这么一批人，他们对软件开发的很多层未必精通，但对每一层都很熟悉，他们对软件技术充满热情，这种人就是所谓的全栈工程师。\n\n对每一层都熟悉，究竟包含哪些层呢？作者的观点是：\n1. 服务器、网络、运维。\n2. 数据模型。\n3. 业务逻辑。\n4. API 层、Action 层、MVC。\n5. UI 层。\n6. 用户体验。\n7. 理解用户与商业需求。\n\n如果对以上七层都很熟悉，同时精通一二，就是全栈工程师了。\n\n这样来看其实并不难。比如对 Java 开发来说，第 3 层是工作重点，稍微有点追求的工程师，对 1、2、4、5 层也都会有一定的熟悉。对前端工程师来说，第 5 层是工作重点，然后对 3、4、6、7 层也会有一定熟悉度。其他职位，运维、DBA、测试等，也都有精通点，同时对周边的层会有熟悉度。\n\n也就是说，大部分有点追求的工程师已经是四分之三栈工程师。反而单栈工程师很少很少，甚至不可能存在。\n\n回到全栈工程师的定义，可以分解为三点：\n1. 精通若干层。\n2. 熟悉所有层。\n3. 对软件技术充满热情。\n\n第 3 点很重要。未必要刻意去让自己熟悉所有层，如果能「对软件技术充满热情」，那么遇到陌生领域时，一个优秀的工程师会有能力去快速学习，从而慢慢地自然而然地就熟悉所有层，就莫名其妙成为全栈工程师了。\n\n**全栈工程师是不给自己设限，是永远保持激情和学习欲望的一批人。**\n\n另外想说一点，全栈工程师并不违背《国富论》提到的社会分工。在软件开发领域，分工依旧是提高效率的重要手段。但分工后，还有影响效率的一个重要因素：\n\n**分工是否合理，是否已达成让合适的人做合适的事。**\n\n从分工合理性的角度去考虑，会发现一些传统的分工未必是合适的。比如第 4 层 MVC 中的 View 和 Controller 层，Java 开发工程师真的是最合适的人选吗？这一层或许可以细化为：\n\n4.1、Service、API、Model 层。\n4.2、View、Router 等处理。\n\n这样，4.1 依旧是后端开发擅长的领域，4.2 则很可能交给前端工程师来负责更合理。再次分工、分工合理性的判定，经常就需要跨界了解，需要全栈工程师的视角。\n\n如果 4.2 交给前端来负责，Node 很可能就是当下更合适的技术选型。基于 Node 可以达成更合理的分工，有如 NCZ 的想法：\n\n![](http://img.hb.aicdn.com/40091e671b0bdee26e516ac050c6caec80885b8a12b87-7JgfFh_fw658)\n\n全栈视角可以让我们重新去审视、去思考各个角色最合适去做什么，从而有可能促进更合理的分工协作。一旦发现了更合理的分工、需要对分工做出调整时，全栈就是一种自然而然的要求。比如基于 Node 的前后端分工协作，就需要前端工程师勇敢地去承担原来只是熟悉却并不精通的领域。如果能承担下来，无论对前端还是后端，效率上都会有提升，甚至带来一系列研发交付方式的变革。\n\n**全栈的背后，是自由，是分工的更细化，是分工的更专业。**\n\n（完）\n\n题图：全栈烧饼。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，只推送原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/184',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/184/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/184/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/184/events',
    html_url: 'https://github.com/lifesinger/blog/issues/184',
    id: 25499547,
    node_id: 'MDU6SXNzdWUyNTQ5OTU0Nw==',
    number: 184,
    title: 'Web 研发模式演变',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 157,
    created_at: '2014-01-13T14:18:10Z',
    updated_at: '2019-07-01T06:34:40Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![](http://img.hb.aicdn.com/cf2559df0179ff4d1ff03dc4def9a8c4ffa7d54e1ba4f-iSUxCs)\n\n前不久徐飞写了一篇很好的文章：[Web 应用的组件化开发](http://goo.gl/DKNX6z)。本文尝试从历史发展角度，说说各种研发模式的优劣。\n## 一、简单明快的早期时代\n\n![1](http://img.hb.aicdn.com/c369aacc8da38af8e422fd295148c57d1b5817fffc56-OcbPdl_fw658)\n\n可称之为 Web 1.0 时代，非常适合创业型小项目，不分前后端，经常 3-5 人搞定所有开发。页面由 JSP、PHP 等工程师在服务端生成，浏览器负责展现。基本上是服务端给什么浏览器就展现什么，展现的控制在 Web Server 层。\n\n这种模式的好处是：简单明快，本地起一个 Tomcat 或 Apache 就能开发，调试什么的都还好，只要业务不太复杂。\n\n然而业务总会变复杂，这是好事情，否则很可能就意味着创业失败了。业务的复杂会让 Service 越来越多，参与开发的人员也很可能从几个人快速扩招到几十人。在这种情况下，会遇到一些典型问题：\n\n1、**Service 越来越多，调用关系变复杂，前端搭建本地环境不再是一件简单的事。**考虑团队协作，往往会考虑搭建集中式的开发服务器来解决。这种解决方案对编译型的后端开发来说也许还好，但对前端开发来说并不友好。天哪，我只是想调整下按钮样式，却要本地开发、代码上传、验证生效等好几个步骤。也许习惯了也还好，但开发服务器总是不那么稳定，出问题时往往需要依赖后端开发搞定。看似仅仅是前端开发难以本地化，但这对研发效率的影响其实蛮大。\n\n2、**JSP 等代码的可维护性越来越差。**JSP 非常强大，可以内嵌 Java 代码。这种强大使得前后端的职责不清晰，JSP 变成了一个灰色地带。经常为了赶项目，为了各种紧急需求，会在 JSP 里揉杂大量业务代码。积攒到一定阶段时，往往会带来大量维护成本。\n\n这个时期，为了提高可维护性，可以通过下面的方式实现前端的组件化：\n\n![2](http://img.hb.aicdn.com/8593eb76f9f51ca75393324311093b715b57671e114f4-nagy6D_fw658)\n\n理论上，如果大家都能按照最佳实践去书写代码，那么无论是 JSP 还是 PHP，可维护性都不会差。**但可维护性更多是工程含义，有时候需要通过限制带来自由，需要某种约定，使得即便是新手也不会写出太糟糕的代码。**\n\n**如何让前后端分工更合理高效，如何提高代码的可维护性，在 Web 开发中很重要。**下面我们继续来看，技术架构的演变如何解决这两个问题。\n## 二、后端为主的 MVC 时代\n\n为了降低复杂度，以后端为出发点，有了 Web Server 层的架构升级，比如 Structs、Spring MVC 等，这是后端的 MVC 时代。\n\n![3](http://img.hb.aicdn.com/9a6bf527dabbdb9b795c58b0b7af6c7a18de9ce311a61-9uiuxT_fw658)\n\n代码可维护性得到明显好转，MVC 是个非常好的协作模式，从架构层面让开发者懂得什么代码应该写在什么地方。为了让 View 层更简单干脆，还可以选择 Velocity、Freemaker 等模板，使得模板里写不了 Java 代码。看起来是功能变弱了，但正是这种限制使得前后端分工更清晰。然而依旧并不是那么清晰，这个阶段的典型问题是：\n\n1、**前端开发重度依赖开发环境。**这种架构下，前后端协作有两种模式：一种是前端写 demo，写好后，让后端去套模板。淘宝早期包括现在依旧有大量业务线是这种模式。好处很明显，demo 可以本地开发，很高效。不足是还需要后端套模板，有可能套错，套完后还需要前端确定，来回沟通调整的成本比较大。另一种协作模式是前端负责浏览器端的所有开发和服务器端的 View 层模板开发，支付宝是这种模式。好处是 UI 相关的代码都是前端去写就好，后端不用太关注，不足就是前端开发重度绑定后端环境，环境成为影响前端开发效率的重要因素。\n\n2、**前后端职责依旧纠缠不清。**Velocity 模板还是蛮强大的，变量、逻辑、宏等特性，依旧可以通过拿到的上下文变量来实现各种业务逻辑。这样，只要前端弱势一点，往往就会被后端要求在模板层写出不少业务代码。还有一个很大的灰色地带是 Controller，页面路由等功能本应该是前端最关注的，但却是由后端来实现。Controller 本身与 Model 往往也会纠缠不清，看了让人咬牙的代码经常会出现在 Controller 层。这些问题不能全归结于程序员的素养，否则 JSP 就够了。\n\n经常会有人吐槽 Java，但 Java 在工程化开发方面真的做了大量思考和架构尝试。Java 蛮符合马云的一句话：让平凡人做非凡事。\n## 三、Ajax 带来的 SPA 时代\n\n历史滚滚往前，2004 年 Gmail 像风一样的女子来到人间，很快 2005 年 Ajax 正式提出，加上 CDN 开始大量用于静态资源存储，于是出现了 JavaScript 王者归来的 SPA （Single Page Application 单页面应用）时代。\n\n![4](http://img.hb.aicdn.com/9297fdc73d83f277d449c92193a3af428ddc0d4411cf9-n1DY6F_fw658)\n\n这种模式下，前后端的分工非常清晰，前后端的关键协作点是 Ajax 接口。看起来是如此美妙，但回过头来看看的话，这与 JSP 时代区别不大。复杂度从服务端的 JSP 里移到了浏览器的 JavaScript，浏览器端变得很复杂。类似 Spring MVC，这个时代开始出现浏览器端的分层架构：\n\n![5](http://img.hb.aicdn.com/158892143bc64033d22dd8ed7e7536e71e070c4a13c57-hPg1Pc_fw658)\n\n对于 SPA 应用，有几个很重要的挑战：\n\n1、**前后端接口的约定。**如果后端的接口一塌糊涂，如果后端的业务模型不够稳定，那么前端开发会很痛苦。这一块在业界有 API Blueprint 等方案来约定和沉淀接口，在阿里，不少团队也有类似尝试，通过接口规则、接口平台等方式来做。有了和后端一起沉淀的接口规则，还可以用来模拟数据，使得前后端可以在约定接口后实现高效并行开发。相信这一块会越做越好。\n\n2、**前端开发的复杂度控制。**SPA 应用大多以功能交互型为主，JavaScript 代码过十万行很正常。大量 JS 代码的组织，与 View 层的绑定等，都不是容易的事情。典型的解决方案是业界的 Backbone，但 Backbone 做的事还很有限，依旧存在大量空白区域需要挑战。\n\nSPA 让前端看到了一丝绿色，但依旧是在荒漠中行走。\n## 四、前端为主的 MV\\* 时代\n\n为了降低前端开发复杂度，除了 Backbone，还有大量框架涌现，比如 EmberJS、KnockoutJS、AngularJS 等等。这些框架总的原则是先按类型分层，比如 Templates、Controllers、Models，然后再在层内做切分，如下图：\n\n![6](http://img.hb.aicdn.com/56f4cee0e6c7af61e24dbf31e4be17f142d5902c1109a-BcxRim_fw658)\n\n好处很明显：\n\n1、**前后端职责很清晰。**前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful 等接口。\n\n2、**前端开发的复杂度可控。**前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本的厚度去说明。\n\n3、**部署相对独立**，产品体验可以快速改进。\n\n但依旧有不足之处：\n\n1、代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。\n2、全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。\n3、性能并非最佳，特别是移动互联网环境下。\n4、SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控。\n## 五、Node 带来的全栈时代\n\n前端为主的 MV\\* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 Node.js 的兴起，JavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：\n\n![7](http://img.hb.aicdn.com/40091e671b0bdee26e516ac050c6caec80885b8a12b87-7JgfFh_fw658)\n\n在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：\n\n1、Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，HTML 的生成也可以放在这层，具体看应用场景。\n\n2、Back-end UI layer 处理路由、模板、数据获取、cookie 等。通过路由，前端终于可以自主把控 URL Design，这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，转而可以专心于业务逻辑层的开发。\n\n通过 Node，Web Server 层也是 JavaScript 代码，这意味着部分代码可前后复用，需要 SEO 的场景可以在服务端同步渲染，由于异步请求太多导致的性能问题也可以通过服务端来缓解。前一种模式的不足，通过这种模式几乎都能完美解决掉。\n\n与 JSP 模式相比，全栈模式看起来是一种回归，也的确是一种向原始开发模式的回归，不过是一种螺旋上升式的回归。\n\n基于 Node 的全栈模式，依旧面临很多挑战：\n\n1、需要前端对服务端编程有更进一步的认识。比如 network/tcp、PE 等知识的掌握。\n2、Node 层与 Java 层的高效通信。Node 模式下，都在服务器端，RESTful HTTP 通信未必高效，通过 SOAP 等方式通信更高效。一切需要在验证中前行。\n3、对部署、运维层面的熟练了解，需要更多知识点和实操经验。\n4、大量历史遗留问题如何过渡。这可能是最大最大的阻力。\n## 六、小结\n\n回顾历史总是让人感慨，展望未来则让人兴奋。上面讲到的研发模式，除了最后一种还在探索期，其他各种在各大公司都已有大量实践。几点小结：\n\n1、模式没有好坏高下之分，只有合不合适。\n2、Ajax 给前端开发带来了一次质的飞跃，Node 很可能是第二次。\n3、SoC（关注度分离） 是一条伟大的原则。上面种种模式，都是让前后端的职责更清晰，分工更合理高效。\n4、还有个原则，让合适的人做合适的事。比如 Web Server 层的 UI Layer 开发，前端是更合适的人选。\n\n**历史有时候会打转，咋一看以为是回去了，实际上是螺旋转了一圈，站在了一个新的起点。**\n\n（完）\n\n题图：演化真不容易呀。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，只推送原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/181',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/181/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/181/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/181/events',
    html_url: 'https://github.com/lifesinger/blog/issues/181',
    id: 21279947,
    node_id: 'MDU6SXNzdWUyMTI3OTk0Nw==',
    number: 181,
    title: '可爱的孩子们',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 10,
    created_at: '2013-10-20T13:20:11Z',
    updated_at: '2013-11-07T05:20:06Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![da5c4c650c3c9692247f19bbaf6ff7dc5d8dda0a6750e-upsn1p_fw580](https://f.cloud.github.com/assets/97227/1368213/52e1c7a6-398a-11e3-9710-bf659f0994bc.jpeg)\n\n周末看芒果台新出的《爸爸去哪儿》，一下子就被吸引住了。对这类节目我完全没有抵抗力，特别喜欢几点：\n1. **真实的小孩**。五个活泼可爱的小孩，虽然是明星或大腕的子女，但全然不像《星光大道》等综艺节目里那些被过度开发的「才艺突出」的小明星。李湘女儿胖乎乎的在生活中时常能碰见，那一张嘴比最好吃的甜甜圈还甜。郭涛儿子那顽皮劲，更是很多六七岁小男孩的共性。五个小孩代表着五种类型，很有看头。\n2. **真实的大人**。以前对明星大腕内心总免不了有排斥，看完这节目，我居然不讨厌李湘了。李湘女儿的爸爸做午饭时那一脸愁容，绝对不是表演出来的。还有田亮老说要做一个「慈祥的父亲」，嘴角那忍不住的小抽动，可以想象田亮平时绝对是开过吼的。这帮爸爸，在这个节目里什么都不是，只是真实的爸爸。节目能做成这样，牛呀。\n3. **真实的场景**。 一切都是透明的，孩子知道这是电视节目，大人也不隐瞒。镜头里还有一大堆旁观者，没事。当表演无所忌讳时，就假作真时假就是真了。第一集的场景设定挺贴近生活的，期待后续能继续贴近生活（看预告第二集是到沙漠里，感觉有点不祥）。\n\n注意，上面不是软文。我真心希望芒果台请我写软文，那样就发大了。\n\n下面的文字，源自我五年以来培育小雕长大过程中的感慨。简言之就一句话：\n\n**孩子们身上，有太多值得大人们重新拾回的东西。**\n1. **好奇心**。小雕会问我恐龙是怎么灭绝的？会问我为什么风一吹水会有波浪？还会问我第一次听说的一些词汇比如「爱不释手」是什么意思？同时不止一次好奇自己是怎么从妈妈肚子里出来的？…… 这些有趣的问题，我很少很少从大人口中听到了。\n2. **无隔夜仇**。小雕干了坏事，老雕忍不住也会打骂。但只要睡一觉，就依旧是最亲的爸爸。这一点，人一长大，貌似能做到的人就很少很少了。\n3. **有所害怕**。小雕害怕木乃伊，不是恐怖，是听了解释后，觉得很神奇。小雕还非常害怕被拘束，比如罚站、关小黑屋等。有所害怕让小雕依稀懂得大自然有很多很多目前还无法解释的事情，需要保有敬畏。有所害怕，同时也让小雕更追求独立、自由。虽然这些词汇孩子还不太懂，但他们开始逐步懂得不自由、不独立会带来不舒服。\n4. **活在当下**。小雕的笑脸是真高兴，哭泣是真伤心。一玩起来是真正的忘我，那份投入是使上全身的力量在奔跑。活在当下，这可是佛的境界。\n5. **无邪**。小雕喜欢哪个女生，就敢上去搭讪，成功就直接牵起手一块玩啦。我仔细观察过，这中间的奔跑、笑容，是真心的一起玩带来的。没有其他奢求、欲念，就是简简单单的喜欢，于是在一起玩。人一旦长大，往往就「有邪」了。\n\n与孩子相比，大人身上的毛病实在是太多了。\n\n今晚闲聊到此。没小孩的赶快要个小孩吧。有人说，如果一个女人不愿意为一个男人生小孩，说明这个女人并不真爱这个男人。我不想得罪丁克们，我想说的是另一件事，在你要小孩前，一定要谨慎。选择了生小孩，往往就选择了你的一生。\n\n最后，如果想直接跟我聊聊孩子们，欢迎加我「来往」帐号：\n\n![68361562jw1e9rv1qrn2vj20f00f0mzf](https://f.cloud.github.com/assets/97227/1368208/f53a7f4e-3989-11e3-8ffa-70c60725b2af.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/180',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/180/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/180/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/180/events',
    html_url: 'https://github.com/lifesinger/blog/issues/180',
    id: 21008475,
    node_id: 'MDU6SXNzdWUyMTAwODQ3NQ==',
    number: 180,
    title: '测试工具设计的一个细节',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 19,
    created_at: '2013-10-15T10:38:02Z',
    updated_at: '2013-11-18T01:47:19Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![b8e55353aa4f44fb514e7a1400185adbf7e900f137bf1-4tmwnr_fw580](https://f.cloud.github.com/assets/97227/1332880/91a21fe4-3585-11e3-913c-2542c5e1b2ea.jpeg)\n\n每次发文，都会有人回复能否来点「干货」。但干货一般真的很干，适合睡前阅读的不多。\n\n幸运的是，今天组内妹子写了一篇博客，从浅入深，很清晰地讲述了前端测试工具开发时遇到的一些问题和解决方案。很精彩，地址如下：\n\n[测试工具设计的一个细节：iframe 还是 window ？](https://github.com/fool2fish/blog/issues/3)\n\n阅读完成后，可以回来听我继续唠叨：\n1. 微信不适合发技术文章，特别是含大量代码的。原本想将上面的文章编辑过来，但上帝饶了我吧，这活比叫我出去跑十圈还难。\n2. 最近看到一句话，说 **「浮躁是源自内心的一种不安全感」**。房子、车子、妹子等社会问题导致的浮躁，我这里就不说了。对于我们码农来说，内心的不安全感，往往来自对自身技术的不自信。很多社区的吵架，PHP 好还是 Java 好、ROR 转型 Node.js 等，很多参与口水仗的码农们，内心或多或少都是「浮躁」的。 **摆脱浮躁的妙方，就是「静」字。** 唯有安静下来，内求于心，踏实地去学去用，才能自信起来。比如沉鱼上面这篇文章，心若静不下来，是不大可能有心情写这么多文字的。对女程序来说，心静、自信，还有美容养颜的功效。不信的话，你可以来看看沉鱼哦。\n3. 最近在微博上发了条关于 **「全端工程师」** 的微博。我对全端工程师的理解，不是说后端、数据库、甚至设计、产品什么的都一锅端。分工细化是提高效率和推动社会进步的重要因素。 **全端不是全才，全端的依托点依旧在端上。** 只是这个「端」，不再局限于传统的 PC 端，需要包括目前兴起的 Phone 端、Pad 端、TV 端、各种 Screen 端等等。这些端，需要前端扩展自己的技能，对 iOS 开发、Android 开发等都要涉猎。至于 Node.js，扩展的也是端，一是数据库上面的服务端，二是当工具语言用，让前端可以游刃于各种 Shell 端。前端就如木匠，优秀的木匠，不会把自己局限在只会用一种工具上。\n\n（完）\n\n题图：细节之美。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/178',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/178/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/178/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/178/events',
    html_url: 'https://github.com/lifesinger/blog/issues/178',
    id: 20683200,
    node_id: 'MDU6SXNzdWUyMDY4MzIwMA==',
    number: 178,
    title: '知识与知道',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 8,
    created_at: '2013-10-08T14:40:12Z',
    updated_at: '2014-03-20T07:13:35Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![image](https://f.cloud.github.com/assets/97227/1289798/3fc032a0-3027-11e3-9166-0566bcbc9322.png)\n\n（一）\n\n九月份去广州校园招聘，一名学生给我的印象很深。我问及一个浏览器兼容的技术细节，他很老实地回答不知道，然后争辩说这是一次性知识，遇到时再 Google 去寻找答案就好。\n\n我继续追问，如果 Google 找不到答案怎么办呢？很多兼容性问题，很可能还没有人总结分享出来，特别是移动开发这一块。这位学生一点也不犹豫地答道：他有过类似的经历，如果搜索不到答案，知道怎么设计测试方案去逐步找出答案，并给我讲了一个具体的案例。\n\n很欣赏这位学生，虽然不知道我想考他的那个具体「知识」，但是他「知道」如何去获取这个知识。\n\n上面这个故事，大家都懂，是有鱼，不如会渔。然而这并不是我欣赏这位学生的主要原因。\n\n真正让我觉得后生可畏的是，面试后的当天晚上，我收到了他的邮件，很详细地给到我他对那个问题的具体思路与结论。\n\n不能光「知道」打鱼的方法，倘若天天不出海，只在沙滩上晒太阳，还不如家里拥有咸鱼干的人呢。\n\n（二）\n\n最近看了些老电影，《神雕侠侣》、《乱世佳人》等。第一次觉得杨过很残忍，在对郭襄这件事上。对一个人好，未必要表露出来，太过了，反而容易把一个人留在梦里。以前不是很明白斯嘉丽对土地的情感，这次重读《飘》，才真真切切感受到什么是生活。在土地面前，爱情仅仅是一颗豆芽。热爱生活，追求更好地活着，才是一个女人永葆青春的良方。白瑞德的离开，又是多么无奈的必然。\n\n《一一》里说，电影可以让人多活三辈子。\n\n杨绛说，年轻的时候以为不读书不足以了解人生，直到后来才发现如果不了解人生，其实是读不懂书的。电影也如此。\n\n我们读过的，看过的，都是「知识」。在生活中活过的，才是「知道」。\n\n（完）\n\n题图：钓鱼去。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/177',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/177/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/177/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/177/events',
    html_url: 'https://github.com/lifesinger/blog/issues/177',
    id: 18908108,
    node_id: 'MDU6SXNzdWUxODkwODEwOA==',
    number: 177,
    title: '关于 Sea.js、开源与前端之路',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 19,
    created_at: '2013-09-03T13:30:38Z',
    updated_at: '2015-12-04T10:24:03Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![image](https://f.cloud.github.com/assets/97227/1072924/ee0bf804-149c-11e3-9398-7ccfec76fb27.png)\n\n前几天配合 CSDN 做了一个采访：[玉伯的前端开发之路](http://www.csdn.net/article/2013-09-03/2816801-front-end-development-seajs-framework/1)\n\n采访时有些匆忙。今天在原采访稿的基础上，稍作修改，整理如下。\n## Sea.js 与 Arale\n\n**CSDN**：先介绍一下自己和目前的工作吧！\n\n**玉伯**：我叫王保平，阿里花名玉伯。目前在支付宝前端技术部工作，从事前端基础类库、工具等产品的研发。喜欢编码、热爱思考，努力把每一天过得平淡又精彩。\n\n**CSDN**：Sea.js 是什么？致力于解决什么问题？\n\n**玉伯**：Sea.js 是一个很纯粹小巧的模块加载器，它只解决一个问题：前端代码的模块化。通过 Sea.js，可以将大量 JavaScript 代码封装成一个个小模块，然后实现模块的加载和依赖管理。\n\n有了 Sea.js，我们就可以书写模块了。Arale 则是一套满足支付宝需求的通用模块集合，是一套基于模块化的前端基础类库，目前具有近百个模块，简单易用。\n\n**CSDN**：发起 Sea.js 项目的初衷是什么？它的本质意义是什么？\n\n**玉伯**：2008 年，在前端开发过程中，经常会出现一个单文件几千行甚至近万行的情况。这种大文件，对协作开发、后续维护、性能调优等都不利。Sea.js 初衷是帮助前端开发工程师能将大文件拆分成小文件，能保持小颗粒度的模块化开发，同时不需要过多考虑依赖关系，让依赖管理轻松自如，让模块化开发变得更自然，就像浏览器原生提供的一样。\n\nSea.js 的本质意义是通过模块化开发，来提高代码的可维护性。对工程师而言，是关注度分离，能将更多精力聚焦在代码本身的逻辑上。\n\n**CSDN**：Sea.js 的设计思想是什么？是如何具体实现的？\n\n**玉伯**：Sea.js 的核心设计思想是「保持简单」。有两层含义：\n1. **对外保持使用接口的简单**。Sea.js的常用API只有7个，使用者一旦了解，基本没什么记忆成本，可以快速上手。\n2. **内部实现代码尽可能简单**。追求内部实现的简单有很多好处，比如别人可以比较容易读懂源码，这样就能参与进来协同开发。源码简单，往往也意味着不太会有晦涩的 bug 存在。Sea.js 的内部实现，一直在往「简单得明显没有 bug」的方向努力。\n\n除了保持简单，Sea.js 的设计理念里还有职责清晰、性能优先和适度完备。\n\n职责清晰是让 Sea.js 的范畴明确，随时知道自己应该做什么，不应该做什么。一个框架，最怕的是需求膨胀，最怕的是复杂化。\n\n性能优先是因为 Sea.js 是底层加载器，倘若性能不好，直接会影响页面性能，因此源码中有不少地方会刻意追求性能。\n\n适度完备是从功能的层面看 Sea.js 的 API 是否能满足常用需求，同时又能通过插件机制对外提供适度的可扩展性。Sea.js 不追求能够满足所有需求，而是追求 2/8 原则。\n\n具体代码实现纯文字不太好描述，感兴趣的可以阅读源码：https://github.com/seajs/seajs，所有源码都在上面，欢迎阅读，欢迎给出建议。\n\n**CSDN**：Sea.js 开发过程中，最大的困难是什么？是如何解决的？\n\n**玉伯**：这个说起来比较有意思，在开发过程中，Sea.js 最大的困难，不是编码，而是模块定义规范的确定。\n\n在业界，目前流行的模块定义规范，有 CommonJS 的 Modues/1.x 规范，还有RequireJS 社区倡导的异步模块定义规范 AMD。这两个规范，在社区里存在比较大的讨论，各有利弊，适用于不同的运行环境。Sea.js 最后采用的是延自 CommonJS Modules/2.0 规范的通用模块定义规范 CMD。这些规范的优劣，至今都有争议。不同的团队，不同的场景下，喜好和选择都有可能不同。\n\n随着 Sea.js 的推广，CMD 规范目前在国内已经有相当多人认可。接下来会进一步国际化，希望能得到更大社区范围内的认可。这条路还很长，不能说已解决了，一切还在解决的路上。\n\n不过，这些都不是关键。即便 Sea.js 以后死掉，只要大家对模块化开发理念有深度认可，那一切也就值了。\n\n**CSDN**：Sea.js 和 Arale 目前分别应用在哪些地方？\n\n**玉伯**：Sea.js 目前已应用在阿里、腾讯、网易等很多公司，具体可以查看 seajs.org 首页下面的 logo 墙。国内有大量中小网站采用 Sea.js 开发。\n\nArale 的使用范围是支付宝，还有阿里巴巴 ICBU 部门，在一小部分国内创业型公司中也有使用。\n\n**CSDN**：您之前还开发过前端类库 KISSY，而 Arale 也是一个基于 Sea.js 的前端类库，两者有什么不同？这是在「造轮子」吗？它们的开发初衷是什么？目标又是什么？\n\n**玉伯**：KISSY 和 Arale 都是前端基础类库，从组件提供的功能来讲，存在很大重合度。但从理念上来讲，这两个类库有比较大的不同。\n\nKISSY 是大教堂式思路，所有组件，从底层基础组件，到上层 UI 组件等等，都是自主研发。这和业界的 YUI3、Sencha 等类库的思路是一样的。\n\nArale 有所不同。Arale 的首要理念是「开放」。开放不光意味着将自己做好的组件贡献给社区，开放更意味着将社区已有的优秀组件直接拿进来用。在开放的理念下，Arale 类库里，直接引入了 jQuery、Backbone、Moment、Handlebars 等业界组件。在这种思路下，Arale 能与开源社区紧密互动，彼此快速共进。\n\nKISSY 和 Arale 的初衷都很简单，KISSY 是解决淘宝的前端基础类库问题，Arale 则是解决支付宝的前端基础类库问题。两者的目标，都是减少前端开发过程中的重复工作量，尽量提高前端开发的工作效率，同时在通用组件层面保障全站的用户体验。\n\n**CSDN**：Sea.js 和 Arale 未来会如何发展？目标是什么？\n\n**玉伯**：从 2.0 版本开始，Sea.js 的发展目标是做简单、纯粹的模块加载器。甚至希望从 2.x 的某个版本开始，就不需要更新了，就能满足绝大部分需求，能非常稳定下来，不需要再升级。\n\nSea.js 稳定后，更多精力会放在 Arale 等前端基础类库的建设上。Sea.js 名称中的 Sea，是「海纳百川、有容乃大」的意思。Sea.js 希望是一片海，可以容纳各种各样的模块，希望能形成一个模块的生态圈，能形成生态链，能促进良性循环，能让整个前端开发界都受益。\n## 开源的点滴感悟\n\n**CSDN**：为什么选择将这些项目开源出来？开源对于自己的技能提升是否有帮助？\n\n**玉伯**：选择开源有两个初衷：\n1. 将好的东西贡献给社区；\n2. 通过社区让东西更好。\n\nSea.js 是在开源中不断成长流行的，很多需求点、优化点，如果不是开源，Sea.js 很难走到今天。\n\n开源本身对技能提升个人觉得是有限的，但技能之外的软技能提升，比如沟通协作、产品化思路、运营管理等非常有帮助。通过开源的方式，比较容易让一个技术人员有产品观，能让自己的眼界在编码之外看到更多美景。\n\n**CSDN**：在开源领域这么久，您有什么感悟？您理解的「开源精神」是什么？\n\n**玉伯**：我理解的开源精神，有三点：\n1.  **拿来主义**。懂得从现有成熟开源项目中去挑选符合自己需求的项目，直接拿来用。程序员容易犯一个病，就是什么东西都想自己造，或者对别人造的，浅尝辄止就判断别人的不行。真正的拿来主义，需要一颗谦卑的心。在「拿」的过程中，需要去看文档，甚至去读源码，这些过程，对程序员的技能增长都非常有帮助。很多程序员的技能提升，并非是写的代码太少，而是看的代码不够多。懂得去看、去理解、去用，是迈入开源世界的第一步。\n2.  **参与比主导更重要**。开源世界里永远不会有完美的项目。当你学会了「拿来主义」后，在使用开源项目时，肯定会遇到各种bug、各种特性不满足。这时，你可以自己去新开一个项目，也可以参与到该开源项目中去，帮助作者一起来完善。个人觉得对于绝大部分项目来说，参与进去帮助完善是更明智的选择。参与进去，可以让你更懂得美，懂得感恩之心，懂得回馈之情。这在过程中，你的功力，往往也会大增。不光是技术上的进步，还包括英语读写能力。在人性沟通上，你也会收获很多，这是无价的财富。\n3.  **重视社区**。除了代码，还有文档、测试用例、Issues 管理、版本发布、升级策略、书籍、视频等等。jQuery、Backbone、AngularJS 等成熟项目，成熟的是社区，而不是源码。好的社区，是在 Google 中一搜索，就能找到不少资料。好的社区，是你踩过的坑，经常已经有人也踩过并整理分享出来了。社区的形成非常不易，如果选择了开源，从项目一开始，就尽量可能的去让社区逐步形成起来。社区形成后，开源才会活起来，否则就是死开源。\n\n最后，知易行难。上面的道理或许大家都懂，真要做到，则是一场修行。Sea.js 和 Arale 也才刚刚上路。好在，选择了，就不怕远。\n\n**CSDN**：您认为，KISSY、Seajs 和 Arale 这些开源项目为什么能取得成功？它们是否从社区中获得了贡献？\n\n**玉伯**：还谈不上成功。目前社区未成型，以 Sea.js 和 Arale 为例，目前从社区中获得的贡献有：\n1.  bugs 反馈和新功能讨论。这很重要，只满足一个公司的需求时，很多想法都想不到，当有多个公司使用你的产品时，在某些点上可以帮团队打开思路，去看到不少原来看不到的地方，甚至有时会有「为什么我们之前没想到」的感慨。\n2.  全网测试。这一块，在Sea.js的开发上尤为明显。Sea.js在每次发布前，都会邀请社区人员一起帮忙运行测试用例。前端开发与后端开发的最大区别之一，就是后端代码的运行环境是固定的，是开发人员自己选择的，而前端代码的运行环境却无法固定，是用户决定的。这使得前端代码的测试，除了自己的内部测试，还需要线上的“众包测试”。开源使得“众包”成为可能。\n3.  代码优化。由于是开源的，代码是公开的，偶尔就会有人会去阅读源码，并发现其中可以优化的一些点。这在Sea.js和Arale里都有一些案例，有时挺感动的。社区的力量，会给人惊喜。\n\n**CSDN**：您如何看待国内的开源环境？\n\n**玉伯**：国内开源环境还不够理想，但越来越好了。很期待更多的公司加入并推动开源活动。对于前端开发领域，一定程度上真没有什么秘密，期待更多公司的开放。\n## 前端泛谈\n\n**CSDN**：前、后端开发有没有明确的分界（是否能完全独立）？您心目中理想的前、后端开发模式是什么？\n\n**玉伯**：前后端开发很难完全独立，个人觉得也没有必要彼此独立。我的想法是「全端工程师」，都是 Web 开发工程师，从前到后应该都能做才行，这对效率、质量都有好处。\n\n但独立的前后端开发工程师也应该存在。前端一些深钻领域，需要前端领域专家的持续投入，后端也一样。这些专家来自一线开发工程师，同时在某个领域有独到的想法和执行力，能沉淀下来形成工具、技术平台，这些平台反过来提供给「全端工程师」去用，这是往深里钻的技术工具化、平台化思路。\n\n**CSDN**：有人认为，过多使用框架会导致开发者忽视对 JavaScript 原生语言特性的学习，变得懒惰，或者基础会很薄弱；也有人认为，只要精通原生 JavaScript 就可以，无需使用框架也能开发出应用，对此您怎么看？\n\n**玉伯**：在前端开发工作中，JavaScript 语言的使用只占比较小的一部分。更多的精力，需要花在语言之外。掌握 JavaScript 语言的基本使用，就如我们在学校学习，需要掌握中学数学的内容一样。这一块我觉得不难，只要肯花时间去学就好。\n\n值得提醒的是，如果只精通原生 JavaScript，那么就如只会中学数学一样，虽然已经能解决很多问题，但要优雅地、更简单地解决复杂些的问题就难了。\n\n框架可以让你从重复低级工作中脱离出来，特别是应用复杂到一定程度时，如果没有框架层的抽象，代码往往会复杂得难以维护。在前端开发越来越复杂的今天，框架已经必不可少。学会去用、去拥抱，往往可以事半功倍。\n\n框架不会让你偷懒，更不会让你基础薄弱。即便是 jQuery，如果你对 DOM 的基本原生操作不太会，那么你也很难真正把 jQuery 使用得很好。就如中学数学都不理解的话，要把大学数学用得很好只会是梦。\n\n**CSDN**：对于繁多的前端框架，应该如何选择？\n\n**玉伯**：这个问题太大了。虚的回答是，根据自己公司的需求去选择合适的就好。实的回答是，如果你还未找到合适的，可以尝试去用用 Sea.js 吧，然后模仿 Arale 去沉淀一套适合公司业务的模块集合，去在业务的基础上构建框架。\n\n**CSDN**：阿里的前端开发流程是什么样的？\n\n**玉伯**：不同团队不一样。比如淘系团队和支付宝系团队很多流程就不一样。流程很大程度上取决于业务类型。淘系很多业务是导购类型，快速往往是第一要素，支付宝很多业务则是金融类型的，稳定与安全往往是第一位的。这两种要求下，产生的流程有很不一样，甚至可以说是地球的两极。目前也在逐步靠拢，寻求合理权衡下的统一。\n\n**CSDN**：能否分享一些您的学习经历、经验？您认为学习前端开发最重要的是什么？\n\n**玉伯**：前端开发是距离用户最近的编码工作。个人觉得，一个优秀的前端开发工程师，一定要对产品有爱。如果做的产品自己都不怎么用，那么你对很多交互细节很可能会缺乏深思，你会在潜意识里忽略掉。但是，如果你自己也用这个产品，那么你就不仅仅是在编码了，你同时还是 PD、PM、测试等等角色，甚至你就是这个产品的 CEO。当 CEO 的感觉挺累但挺爽。去找到你认可、让你为之疯狂的产品吧，你的开发能力会在你的疯狂中突飞猛进。\n\n**CSDN**：您眼中的技术大牛是什么样的？如何成为技术大牛？\n\n**玉伯**：我理解的技术大牛，是把事情做得很专业的人。温伯格在《理解专业程序员》中对专业有很好的定义：\n\n> 专业是，具有了不起的技艺或经验。\n> 并为其他人解决问题，无论问题有多麻烦。\n\n很多人在追求具有了不起的技艺或经验，但只有这一项，永远称不上「专业」。专业还必须不厌其烦地为他人解决问题。无论做业务还是基础技术，都能做得很专业。追求专业、变得专业，价值、成就感往往就会水到渠成。成为技术大牛，也就是自然而然的成长。\n\n（完）\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/176',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/176/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/176/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/176/events',
    html_url: 'https://github.com/lifesinger/blog/issues/176',
    id: 18733290,
    node_id: 'MDU6SXNzdWUxODczMzI5MA==',
    number: 176,
    title: '又是一年校招时',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 36,
    created_at: '2013-08-29T14:15:56Z',
    updated_at: '2017-01-28T12:09:06Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![image](https://f.cloud.github.com/assets/97227/1050128/dd35d900-10b4-11e3-8861-6bfcea9385d7.png)\n\n最近有两条消息：一条是说阿里对应届生很大方，去年招的技术年薪 20 万起，同比百度约 17 万左右，腾讯硕士 14 万起。华为今年刚调薪，本科月薪 8000 元至 9000 元，硕士 1 万。\n\n还有一条消息是说，阿里今年推出了 A-star 计划，拟招 10 名左右技术牛人，年薪 60 万，并解决北京户口。\n\n微博私信和邮件上，不少人询问我是不是真的。这个不太好回答，我只提供一些分析。\n\n对于优秀应届生，技能基础好、综合素质高、发展潜力足的，年薪 20 万在阿里是完全有可能的。注意年薪里包含了年终奖、期权等。月薪，是不能用 20 / 12 去算的，大家都懂，我不多说。\n\n对于今年的 A-star 计划，可以说完全是真的。但这就如彩票一样，人人都有机会中 500 万，但结果往往是无人中奖，奖金累积到下一期。至于为什么要搞 A-star 计划，大家也都懂，我不多说。\n\n年薪 20 万起也好，A-star 计划也好，所有这些招聘策略，核心目的只有一个：希望更多人选择阿里。如果能吸引到真正的技术大牛，也绝对会给得起高薪。这是一种对人才的态度，如果你牛，你敢来，阿里就敢给。\n\n关键的问题是： **你是否够牛？**\n\n如果答案是肯定的，你去哪，高薪对你来说都是迟早的事情。别成为方仲永就好。\n\n如果答案是否定的，那么所有公司吸引眼球的招聘广告，对你来说意义都不大。我更建议你参考我的微博来做出选择：\n\n> 如果你对影视、书籍等文艺范的东西感兴趣，别犹豫，尝试去豆瓣等公司。如果你对社交网络感兴趣，去腾讯就好。如果对 iOS 感兴趣，去小米或锤子手机等等公司。如果哪一天，你突然发现自己还是对钱感兴趣时，来支付宝就好。\n\n**真正对什么产品感兴趣，就去哪吧。刚毕业，年轻着呢，别一开始就在乎哪点钱的差距。**\n\n（完）\n\n最近超忙，WTP 更新缓慢，非常抱歉。我会尝试写点短小的文章，保证一定的更新频率。也欢迎回复交流，以及提供想讨论的话题。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/175',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/175/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/175/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/175/events',
    html_url: 'https://github.com/lifesinger/blog/issues/175',
    id: 17375000,
    node_id: 'MDU6SXNzdWUxNzM3NTAwMA==',
    number: 175,
    title: 'Sea.js 源码解析（三）',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 41,
    created_at: '2013-07-30T02:51:43Z',
    updated_at: '2016-02-18T08:34:03Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![789px-mallard2](https://f.cloud.github.com/assets/97227/876112/4ba141d0-f8ba-11e2-8b6d-4eabd4af4434.jpg)\n\n前一篇解析中，关于 undefined 的讨论挺有意思。jQuery 2.x 里，很可能会去掉这种写法。有兴趣的可以去看下[原文评论](https://github.com/lifesinger/lifesinger.github.com/issues/171)。\n\n今天继续源码解析，说说 util-lang.js 文件。\n## 语言增强\n\nutil-lang.js 经历丰富，一生大起大落，辉煌时有好几百行，到如今只剩下十几行。\n\n``` js\nfunction isType(type) {\n  return function(obj) {\n    return Object.prototype.toString.call(obj) === "[object " + type + "]"\n  }\n}\n\nvar isObject = isType("Object")\nvar isString = isType("String")\nvar isArray = Array.isArray || isType("Array")\nvar isFunction = isType("Function")\n\nvar _cid = 0\nfunction cid() {\n  return _cid++\n}\n```\n\n辉煌时的几百行，提供了各种功能，今天暂且不表，以后有机会再说。剩下的功能，明眼人一看就明白，一个是类型判断，另一个 cid 生成器。先聊聊前者。\n## 类型判断\n\n以 isString 为例，这个故事不太复杂，也不那么简单。各位看官泡杯凉茶，听我道来。\n\n判断一个变量是否字符串类型，最简单直接的写法是\n\n``` js\nfunction isString(obj) {\n  return typeof obj == "string"\n}\n```\n\n绝大部分情况下，以上代码就够用了。然而\n\n``` js\ntypeof new String("xxx") // => "object"\n```\n\n当字符串是通过 `new String` 生成时，typeof 返回的是 `"object"`，因为 `new String` 返回的的确是对象。可以参考这篇总结文：[JavaScript\'s typeof operator](http://blog.alexanderdickson.com/javascript-typeof) 。\n\n但我们才不管是字符串直接量，还是字符串对象呢，我们希望这两种情况下，isString 都能返回 `true` 。于是\n\n``` js\nfunction isString(obj) {\n  return typeof obj == "string" || obj instanceof String\n}\n```\n\n上面的写法，曾出现在各种流行类库的早期代码中，一直工作得好好的。直到有人在 iframe 中，写出以下代码\n\n``` js\n// 在 iframe 中\nvar foo = new String("bar")\n\nif (top.isString(foo)) {\n  // Do some cool things\n}\n```\n\n上面的代码，是调用父页面的 isString 方法，来判断 iframe 中的变量是否字符串。由于 iframe 和 top 中的 String 全局对象并不相等，因此 `obj instanceof String` 会返回 `false`，于是 `top.isString(foo)` 华丽丽地挂了。\n\n做前端真苦逼，但不能因为苦逼就撂挑子不干了。全世界范围内开始为这一「难题」想尽各种办法，后来有神人出山，轻松给出一段代码\n\n``` js\nfunction isString(obj) {\n  Object.prototype.toString.call(obj) == "[object String]"\n}\n```\n\n此代码一出，天下震惊，引各路类库竞折腰。这代码，可不仅仅解决了 isString 的问题，而是解决了 isXxx 一类问题。\n\n神码原理很简单。简言之，是因为 ECMAScript 就是这么规定的，而各个浏览器都遵守了这一规定，因此就有了这一统天下的写法。有兴趣的，可以看这篇文章：[instanceof considered harmful (or how to write a robust isArray)](http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/) 。\n\n下面说说另一端辛酸史。\n## 鸭子判断\n\n在神码出现前，isString 的问题还好说，甚至可以忽略，但 isArray、isFunction、isRegExp 等函数的问题更大，而且很难忽略。我们拿 isArray 来说说。\n\n``` js\ntypeof [] // => "object"\n```\n\n不要去责怪 typeof，它没错。JavaScript 里，数组就是对象。\n\n``` js\n[] instanceof Array // => true\n```\n\ninstanceof 还是挺不错的，但和 isString 一样，遇到跨页面操作时，就不行。和 isString 还不一样，对于 isArray 来说，这个问题更严重。（想想为什么？）\n\n于是大家想起了一句谚语\n\n> If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.\n> 如果它看起来像鸭子，会像鸭子一样游泳，也会嘎嘎叫，那么它很可能就是一只鸭子。\n\n比如题图中的动物，大部分人会猜这是一只鸭子。\n\n人类的大脑，对世界的认识里，往往就是鸭子逻辑。这没什么不对，绝大部分情况下都运作良好。题图中的动物的确是只鸭子，我们的判断是对的。\n\n这样，放到代码里，就有了\n\n``` js\nfunction isArray(object) {\n  return object != null && typeof object === "object" &&\n    \'splice\' in object && \'join\' in object\n}\n```\n\n上面的代码，在 Prototype 类库中真实存在过。直到神码出现后，才改成以下写法\n\n``` js\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) === "[object Array]"\n}\n```\n\n对现代浏览器来说，上面的写法，依旧让各大浏览器引擎的实现者觉得很难受，于是直接有了\n\n``` js\nArray.isArray([]) // => true\n```\n\nArray 对象中直接有了 isArray 静态方法。当年的详情：[Determining with absolute accuracy whether or not a JavaScript object is an array](http://web.mit.edu/jwalden/www/isArray.html) 。\n\n可惜目前只有 isArray 方法，isFunction、isRegExp 等，依旧得靠我们自己去实现。\n## 放在一起\n\n看完了前人的辛酸史，我们直接拿来用就好。最简单的拿法是\n\n``` js\nvar toString = Object.prototype.toString\n\nfunction isObject(obj) {\n  return toString.call(obj) === "[object Object]"\n}\n\nfunction isString(obj) {\n  return toString.call(obj) === "[object String]"\n}\n\nfunction isArray(obj) {\n  return toString.call(obj) === "[object Array]"\n}\n\nfunction isFunction(obj) {\n  return toString.call(obj) === "[object Function]"\n}\n```\n\n在绝大部分代码里，上面这样写，已经很完美。但在 jQuery 或 Sea.js 等类库代码里，考虑压缩后的大小，依旧可以改进\n\n``` js\nfunction type( obj ) {\n  if ( obj == null ) {\n    return String( obj );\n  }\n\n  return typeof obj === "object" || typeof obj === "function" ?\n      class2type[ core_toString.call(obj) ] || "object" :\n      typeof obj;\n}\n```\n\n上面是 jQuery 里的写法，有兴趣的可以去研读下。特别是我没提及的 isObject 和 isFunction，这两个历史更曲折悠长，衍生讨论很多。\n\nSea.js 里，只做了个简单封装\n\n``` js\nfunction isType(type) {\n  return function(obj) {\n    return Object.prototype.toString.call(obj) === "[object " + type + "]"\n  }\n}\n```\n\nisType 是个返回函数的函数，这样就可以用来生成 isString 等各种方法。这写法主要是为了减少压缩后的大小，不是为了故意耍酷。耍酷的代码要尽量少，要见一个杀一个。\n\n在 Sea.js 里就这么着了，是因为在 Sea.js 的使用场景下，isXxx 都是内部方法，调用处是可预测的，因此无需像 jQuery 那样考虑各种各样场景。\n## cid 生成\n\nutil-lang.js 里，还有一段代码\n\n``` js\nvar _cid = 0\nfunction cid() {\n  return _cid++\n}\n```\n\ncid 代表的是 client id，一般还会有\n1. uuid - 全宇宙唯一 id 。\n2. uid - 唯一 id 。\n3. cid - 在客户端保持唯一的 id 。\n\n在 Sea.js 的场景下，cid 就足够用了。在够用的情况下，尽量保持简单，这是 Sea.js 的源码追求。\n## 最后\n\n上面的故事，在 JavaScript 开发中，算是很小很小的插曲。但每每回顾，依旧心生敬畏。 **对正确性和简单性的追求，是优秀程序员心中的「根因」** ，有了这根，才有了繁花似锦的各种代码。\n\n最后，留几个小作业：\n1. 我们知道 `typeof new String("xxx")` 返回 "object"，请问 `typeof String("xxx")` 返回什么？为什么？\n2. 为什么我用的是 `typeof obj == "string"` 而不是 `typeof obj === "string"` ？\n3. 下面这种写法，有什么不妥？\n   \n   ``` js\n     function isString(obj) {\n       return obj.constructor === String\n     }\n   ```\n4. `Object.prototype.toString.call(obj)` 和 `({}).toString.call(obj)` 的区别是什么？哪个好？\n5. 鸭子判断究竟好不好？那些异常情况，真的需要关注吗？\n\n以上 5 个问题，当回复里都有思考过的回答后，我再更新 Sea.js 源码解析（四）。WTP 的更新频率，取决于大家的参与程度，靠大家了:)\n\n（完）\n\n题图：并不简单的鸭子。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/174',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/174/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/174/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/174/events',
    html_url: 'https://github.com/lifesinger/blog/issues/174',
    id: 17312011,
    node_id: 'MDU6SXNzdWUxNzMxMjAxMQ==',
    number: 174,
    title: '几部老电影',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 23,
    created_at: '2013-07-28T13:33:34Z',
    updated_at: '2019-05-10T09:42:22Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![68361562jw1e6zhj6walbj20go0bugmh](https://f.cloud.github.com/assets/97227/868272/efa5beb4-f789-11e2-9479-71f6317e9deb.jpg)\n\n也许是天气太热，也许是因为人老了，最近周末，喜欢宅在在家里找老电影看。\n\n**女孩如电影，电影像女孩。** 有些大明星，比如林志玲，对我而言，就如豆瓣电影排行榜的第一名《肖申克的救赎》，虽大名鼎鼎，可无法打动我的心，评价再高，也觉其无趣。\n\n有「趣」很难得。世界的多样性，造物主的顽皮，让地球文明充满生趣。不喜欢的电影，不代表就是烂电影。喜欢的电影，也不代表就是好电影。「好与坏」，是内心的感受，离不开「个体」。世俗的判断，是主流价值观，是大众生活的侧影，但未必与个体的内心感官有很大重合。\n\n以前有位老朋友说， **一个人的成熟，可以看他是否已经从内心去除「对与错」、「好与坏」、「成与败」，要彻底拔除「攀比」之心** ，虽然很难很难。马云成功吗？这句话是一个鱼饵。你尝试去回答它，就意味着你默许了背后的价值观。\n\n**「默许」很可怕。** 长在中国的人，大都成为了唯物的无神论者，再去看唯心的一些观点时，往往内心深处已经「默许」了唯心是错的。控制教育，就控制大部分人的思想，政治非常非常禁锢人性、人心。从小的意识灌输，甚至会让长大的你，即便辨识到自己的有些想法可能是错的，但却很难很难再纠正这些从小就形成的想法。\n\n比如科学，绝大部分人的意识里，都「默许」了科学是对的。然而科学只是认识世界的一种方式，科学的背后，依旧是假设、是相信。比如爱因斯坦的狭义相对论，离不开相对性原理和光速不变原理。所谓原理，本质上是我们都相信的假设。 **因为「相信」，世界才发生着改变，在你眼里，更在你心中。**\n\n思绪有点飘，回到今天的主题。\n\n首先推荐三部电影：《Before Sunrise》、《Before Sunset》、《Before Midnight》。 *_两个人的相遇，最难得的是「谈得来」。 *_ 男女主人偶遇，很谈得来。从第一部电影，一直谈了 18 年。如果两个人，彼此可以谈童年、谈成长、谈昨天的眼泪、谈明天的梦想、谈油盐酱醋茶、谈性、谈委屈、谈死亡等等，那么不是你爱上 TA 了，就是 TA 爱上你了。什么是情，什么是爱，什么是婚姻，什么是生活，这三部电影，讲述了太多太多。如果你像我一样，已经有点「老」了，去品品这部片吧，去「相信」，就会有改变。\n\n再推荐另三部电影：《推手》、《喜宴》、《饮食男女》。「一家人住在一个屋檐下，照样可以各过各的日子，可是从心里产生的那种顾忌，才是一个家之所以为家的意义。」平淡的生活，让人窒息，甚至想逃离，但因为「顾忌」，而生亲情、爱意。 **生活如烹饪，需要用心投入才能做出好味道。**\n\n以上六部电影，以及很多很多电影的背后， **故事之所以成为电影，都是因为「勇气」。** 《爱丽丝漫游仙境》、《疯狂原始人》，在用童话讲述勇气的不易和对生命的价值。「Impossible is possible」 并不是一句空话，之所以成为空话，是大部分人缺少勇气。\n\n偶尔漫步浙大校园，那斑驳的树影，摇曳出一地月光。\n\n（完）\n\n 题图：话在耳边，路在脚下。\n\n最后，做个小调查，类似今天这种「水文」，大家究竟有无兴趣阅读？这些文字，对你的想法、生活，是否有过帮助？如果有过，期待你的回复。感谢。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/173',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/173/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/173/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/173/events',
    html_url: 'https://github.com/lifesinger/blog/issues/173',
    id: 17263031,
    node_id: 'MDU6SXNzdWUxNzI2MzAzMQ==',
    number: 173,
    title: '说说鸡汤',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 16,
    created_at: '2013-07-26T13:21:17Z',
    updated_at: '2018-11-04T06:18:56Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![7d1563ab5e27e2d7844cc7d66a211cb358716bff1120f-sf0srz_fw580](https://f.cloud.github.com/assets/97227/862589/34a656d0-f5f6-11e2-9d05-67e6092f65b6.jpeg)\n\n周五总是特别忙，才到家，趁着『中国好声音』开始前还有近一个小时，今天继续侃大山，轻松娱乐为主。\n\n最近本人勤快些，每天发微博也发微信。收到的反馈里不时有以下词汇：\n\n> 纯纯的一碗鸡汤呀。\n> 又是心灵鸡汤。\n> 鸡汤……\n\n首先，从农村长大的我，真的很好奇鸡汤有什么不好的。纯正的农家养大的鸡，做出的汤香甜美味、营养丰富，除了逢年过节，或是大病初愈，抑或坐月子，一般时机都喝不上鸡汤。\n\n微博回复「鸡汤」的人，应该大部分都是城里人，估计只吃过饲料鸡。那鸡熬出来的汤的确难喝，估计也没什么营养。于是借物移情，见到没什么内容的文字，也就喜欢用「鸡汤」来描述。\n\n可是，下面这文字真没什么内容吗？\n\n> 上一代人因为很多原因失去了选择的权利，但我们还有很多机会，应该珍视这个时代带来的便利和宽容。虽然有很多束缚，比如家庭、工作等，说白都是价值取向问题，哪些是真正珍视的，哪些是愿意放下的……我愿意像在一条河流中行走那样，经受更多水流的冲击，而不是待在静止的池塘里。http://t.cn/zQITcQS\n\n这是西乔的一段感慨，我稍微缩减了下，好发在微博里。西乔这段文字，是她的亲身阅历和内心感慨。如果这种文字都是「鸡汤」，那央视的节目只能是白开水了。不对，白开水非常非常重要，央视的很多节目只能是汽车尾气。\n\n对于喜欢说「鸡汤」的人，我「恶意」揣度下，也许是因为\n1. 家里非常有钱，每天吃鲍鱼、老虎肉，对鸡汤的确不屑一顾。\n2. 从来没吃过真正的鸡做的汤，自然就不知「鸡汤」真滋味。\n\n非常有「钱」的人应该很少很少，像释迦摩尼、乔布斯、马云、王石等人，以他们的阅历，去看西乔的感慨，的确可能会觉得「小儿科」。他们如果给西乔回复个「纯纯的一碗鸡汤」，估计没什么人会反驳。\n\n但芸芸众生，大多凡人。很多说鸡汤的人，估计只是惰性与叛逆使然，是少年期的逆反，是未经思考的懒惰。很多鸡汤，都快变成大家公认的了，比如\n\n> 成功离不开勤奋。\n> 好领导要有智慧和爱。\n> 爱就要给她自由、让她幸福。\n\n这些文字，如果你觉得是「纯纯的鸡汤」，我只想说你要么太年轻还不懂这个世界，要么就是活得太悲剧，很多东西还未有真体味。\n\n你也许会反驳，这些文字是鸡汤，不是因为这些文字没道理，也不是因为自己没体味，而是因为这些文字只讲了道理，但没讲如何才能做到。比如成功离不开勤奋，大家都懂，但关键是，如何做到勤奋？如何做到才是关键问题，不讲关键问题的，都是鸡汤。\n\n如果你持以上观点，我不反驳。但想说，很多很多道理，都是知易行难。很多很多时候，同一个道理的背后，有千万条不同的实现方式。没有人能告诉你怎么做，你在这个宇宙中独一无二，你需要去找到自己的方式。比如爱，每个人对爱的理解都可能不同，无论你想拥有爱，还是付出爱，唯一能给你答案的，只有你自己独一无二的思考，和实实在在的行动。\n\n**别轻易说「鸡汤」，特别是对认真的文字。更别养成说「鸡汤」的习惯，那会让你的思维懒惰直至死去。**\n\n（完）\n\n题图：每次回到老家，一大碗土鸡炖的鸡汤，都是难忘的美味佳肴。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/172',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/172/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/172/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/172/events',
    html_url: 'https://github.com/lifesinger/blog/issues/172',
    id: 17207547,
    node_id: 'MDU6SXNzdWUxNzIwNzU0Nw==',
    number: 172,
    title: '工具与效率',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 20,
    created_at: '2013-07-25T12:01:23Z',
    updated_at: '2017-11-07T12:54:29Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![d9a3182518b78f21659e5e6fa5251801b159c80e178d4-owsuul_fw580](https://f.cloud.github.com/assets/97227/855359/dcc693c8-f521-11e2-86c9-21658e853b08.jpeg)\n\n今天忙，没时间写 Sea.js 源码解析，闲聊点其他话题。\n\n最近冯大辉和陈皓都有发文讨论「加班和效率」，阐述得很明白，我补充说说效率与工具的关系。\n\n很多程序员，包括我自己，都正在迷恋或曾经迷恋过各种工具，最常见的是代码编辑器。经常一有人「亵渎」某个神器，就会引起激烈的口水战，甚至上升到哲学高度……\n\n谈工具与效率之前，想先谈下另一个话题。\n\n最近看到 [一篇文章](http://www.linkedin.com/today/post/article/20130502173937-15454-there-are-only-four-jobs-in-the-whole-world-are-you-in-the-right-one)，讲我们这个大千世界上，实际上只存在四种职位。\n1. **生产者（Producers）**。楼下的快餐店员工、公交车司机、去广州的大量打工者、建筑工人、商场服务员等等，这些工作的最大特点就是重复。但这是社会的主流生产者，价值巨大。没有重复工作，现代社会将停止运转。\n2. **改进者（Improvers）**。重复工作的特点是流程化、规范化。但所有的流程、规范，都有改进空间。无论是餐饮行业，还是软件开发行业，流程等各方面的改进，都是很多企业的竞争力。改进者经常是资深生产者，经历过大量重复工作的「摧残」后，才往往能做出改进。改进者的价值也很大，不断的改进，可以把一个行业，做到极致。\n3. **构建者（Builders）**。构建者不同于改进者，构建者可以将想法变成现实，可以将很多概念设想，变成实体。在互联网行业，很多创业者都是构建者。科技行业也有很多，比如 3D 打印机能从概念变成现实，离不开构建者。这个世界，构建者改变世界，虽然成功者并不多。\n4. **思考者（Thinkers）**。思考者富含远见，对未来充满想法，并能给出实际可行的指导。比如爱因斯坦，没有他的思考沉淀，原子能就没这么快走进现实。思考者很少很少。\n\n我们大部分人，都会同时具备多个角色，比如是生产者也是改进者，改进者也是构建者，偶尔我们也会是思考者。\n\n不同的角色，工具对其工作效率的影响有很大不同。\n\n对于生产者来说，好的工具可以极大提高工作效率。比如跨省的快递员，如果有飞机协助，效率直接比电动车高非常非常多。\n\n对于改进者、构建者和思考者来说，工具往往并不会带来工作效率的飞跃。\n\n回到我们程序员，一般刚毕业时，工作前一两年很可能是生产者。这时工具的确很重要，因为这个阶段我们是「码农」，用什么锄头干活，有没有自动打谷机等工具，很影响工作效率。熟练掌握一些顺手的工具，很重要。\n\n工作几年后，工作内容会逐步变成改进者的角色。这时最影响效率的是大脑，学会如何去发现问题，如何总结沉淀经验，如何扩充自己的视野思路等，这些方面，才是影响效率的最重要因素。\n\n如果有幸成为构建者，技术的广度和深度，做事的心态和眼界，环境的认可和人脉等等，是影响事情能否做成的关键。这个阶段，都不再会怎么谈效率。\n\n最后举自己的一个实际例子。Sea.js 的开发，目前介于改进者和构建者之间。这一块的工作效率，核心取决于我对模块化开发的理解，对同类产品实现细节的深入，以及自身编码技能的积累上。目前效率最高的时候，是静下心来，用传统的纸和笔勾勒思路的时候。大概理清楚了思路，用 notepad 也能很快把功能实现出来。\n\n掌握基本的工具是有必要的。比如对于前端开发来说，学会使用至少一个浏览器的开发者工具是必要的。合理的使用，会让整体工作更顺畅。\n\n但不要执迷于工具。工具能将效率提升到某个量级，但很快就会碰触天花板。真正的效率突破，不在工具上。\n\n**提高效率的核心，是去找到效率的「梗」。工具只是辅助，加班也只是临时措施。从「梗」上去探寻，才能实现效率的真突破。**\n\n（完）\n\n题图：最有效的工具，是大脑。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/171',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/171/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/171/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/171/events',
    html_url: 'https://github.com/lifesinger/blog/issues/171',
    id: 17149008,
    node_id: 'MDU6SXNzdWUxNzE0OTAwOA==',
    number: 171,
    title: 'Sea.js 源码解析（二）',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 32,
    created_at: '2013-07-24T10:15:53Z',
    updated_at: '2016-07-09T14:21:28Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![8c9a726bf3715831bfabc2d73ed420005f390bfa20c93-f3diwu_fw580](https://f.cloud.github.com/assets/97227/847840/00b22ee2-f44a-11e2-8be3-1955a29c4a78.jpeg)\n\n昨天的文章，原以为没什么人看。毕竟微信公众帐号里，技术类的很少。在微信里阅读技术文章，也会比较累些。不习惯在微信里看技术的，可以点击底部的「原文链接」，所有文章都有同步到我的 GitHub 博客。大家可以选择适合自己的方式阅读。\n## 文件顺序\n\n昨天说了整体目录结构，今天来看看 src 目录。\n\n```\nintro.js             -- 全局闭包头部\nsea.js               -- 基本命名空间\n\nutil-lang.js         -- 语言增强\nutil-events.js       -- 简易事件机制\nutil-path.js         -- 路径处理\nutil-request.js      -- HTTP 请求\nutil-deps.js         -- 依赖提取\n\nmodule.js            -- 核心代码\nconfig.js            -- 配置\noutro.js             -- 全局闭包尾部\n```\n\n推荐按顺序依次阅读。这个顺序，在 [Gruntfile.js](https://github.com/seajs/seajs/blob/master/Gruntfile.js) 中有指明。 dist 目录下的 sea.js，就是以上文件按顺序合并生成的。\n## 大闭包\n\nintro.js 和 outro.js 的代码很简单：\n\n``` js\n(function(global, undefined) {\n\n  if (global.seajs) {\n    return\n  }\n  // 以上代码由 intro.js 提供\n\n  // ...\n  // ...\n  // ...\n\n  // 以下代码由 outro.js 提供\n})(this);\n```\n\n这个代码组织方式，最初在 jQuery 项目中看见。几个细节：\n1. global 参数，传入的是全局的 this 值。这样，在浏览器环境中，global 是 window 对象。在 Node.js 环境中，global 则是 node 环境中的 global 对象。这是一个跨平台的兼容式写法。\n2. 第二个参数 undefined，由于实参中并没有传入，因此这个参数的值始终会是真正的 undefined。这种写法在类库中很普遍。传说中这样写的好处是，可以防止原生的 undefined 被覆盖掉。比如可以 `window.undefined = true`，这样所有 undefined 就不再是 undefined 了，很多代码就会出问题。这种说法理论上成立，但在我经历过的所有项目中，还没遇到过哪个前端会闲的蛋疼去覆盖原生的 undefined。Sea.js 中这么写，是为了另一个目的：压缩。如果不用 undefined 参数，undefined 是不会被压缩掉的。变成参数后，就一局部变量了，可以压缩成一个字符，能省不少字节。\n3. `if (global.seajs) { return }` 这句，是为了防止一个页面中有引入多个 sea.js。当有多个引入时，生效的永远是第一个。这种先到者优先的策略，是因为 Sea.js 本身的内部机制。Sea.js 是带状态的，先到者优先策略，可以保证状态的唯一性和一致性，否则会出现竞争，需要额外的逻辑来处理。\n4. 大闭包的写法，还有一个「额外的福利」，让单元测试变得简单。大家可以看 [tests/specs/util/test.html](https://github.com/seajs/seajs/blob/master/tests/specs/util/test.html) ，在这个文件里，直接用 script 标签依次引入了上面的文件，但没有引入 intro.js 和 outro.js。这样，所有内部方法，自然而然就全部暴露到全局了。单元测试代码中，也就可以直接测试这些私有方法，很便捷。\n## 基本命名空间\n\n理解了大闭包，剩下的文件，就是一个个小模块，提供各种功能。来看 sea.js 文件。\n\n``` js\nvar seajs = global.seajs = {\n  version: "@VERSION"\n}\n\nvar data = seajs.data = {}\n```\n\n定义了 seajs 变量，并放到全局对象中。其中 `@VERSION` 是占位符，在构建时，会从 package.json 中读取版本号来替换。\n\n还定义了 data 变量，存放 seajs 相关的各种数据，比如配置信息、事件处理器等。\n\n好了，就这么简单。\n## 最后\n\n时间好快，应该又会有人抱怨这第二篇文章太水了。等不及的，可以提前去看看后续的源码。不然就跟着我的节奏来吧，这可是系列文章，我的预期是写上十篇以上。\n\n最后，留两个小练习：\n1. 为什么 `window.undefined = true` 能覆盖 `undefined`，但 `window.null = true` 却不能覆盖 `null`？\n2. 为什么要把 data 变量放到 `seajs.data` 上？\n\n（完）\n\n题图：面朝大海，春暖花开。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/170',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/170/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/170/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/170/events',
    html_url: 'https://github.com/lifesinger/blog/issues/170',
    id: 17089697,
    node_id: 'MDU6SXNzdWUxNzA4OTY5Nw==',
    number: 170,
    title: 'Sea.js 源码解析（一）',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 26,
    created_at: '2013-07-23T08:43:04Z',
    updated_at: '2015-09-07T10:58:41Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![image](https://f.cloud.github.com/assets/97227/840467/7fc21882-f373-11e2-85a3-e8885bff283f.png)\n## 缘由\n\n重构 Sea.js 2.1 时，有个很重要的目标：让大家都能简单清晰地看明白 Sea.js 的源码。清楚源码，好处很多：\n1. 遇到使用上的问题，可以快速定位和解决。\n2. 可以根据个性需求，定制 Sea.js，比如特定场合下的精简版。\n3. 能明白设计和实现细节，可以讨论、改进，为社区做贡献。\n\n在深入源码之前，依旧希望各位能「达成以下成就」：\n1. 有看过「[5 分钟上手 Sea.js](http://seajs.org/docs/#quick-start)」\n2. 有阅读过至少一遍「[Sea.js 使用文档](http://seajs.org/docs/#docs)」\n3. 有在实际项目中使用过 Sea.js\n\n很多源码细节，都离不开使用场景，只有真实放入场景中，才会清晰明白。下面会从整体结构，到实现细节，逐一阐述 Sea.js 源码中的所有秘密。\n## 目录结构\n\nSea.js 的所有代码都通过 GitHub 管理，项目地址：\n\n> https://github.com/seajs/seajs\n\n各个目录的内容为：\n\n```\ndist              --  构建好的文件\ndocs              --  文档\nlib               --  Node.js 版源码\nsrc               --  源码\ntests             --  测试文件\ntools             --  构建工具相关文件\nGruntfile.js      --  grunt 配置\nMakefile          --  make 配置\npackage.json      --  包的配置信息\n```\n\n还有些文件暂时不用关心，后续有必要时会提及。作为一个有追求的程序员，经常会为各种细节烦恼，目录结构就是其中之一。定目录结构时，经常会纠结：\n1. 源码有必要单独放在 src 目录里吗？还是直接放在根目标就好？很多开源小类库，比如 underscore 等，源码都是直接放在根目录，简单明了。但当源文件非常多时，放根目录会很混乱，因此在 YUI3 等大项目中，源码会分门别类放得比较深。对于 Sea.js 来说，源码文件还是有点多，因此特意建了一层目录来存放。至于 lib 目录，则是 Node.js 模块的标配了，有业界潜规则的，一般直接遵守就好。\n2. docs 目录和 tests 目录也是标配，一个放文档，一个放测试。这两个目录，最常纠结的是，应该用单数（doc、test）还是复数（docs、tests）？这个没有定论，不同社区的习惯不同，即便同一个社区，经常也能看见混用的情形。我个人受 YUI 社区的影响比较大，当初选择了复数形式，现在觉得无论复数、单数，都行。\n3. tools 目前有些特殊，是 Sea.js 历史遗留下来的。Sea.js 一直采用 Google Closure Compiler（简称 GCC） 来压缩。GCC 不光能压缩代码，还能检查代码错误、风格等等。这需要一些配置文件，当初就全放 tools 目录了。最起初，Sea.js 采用 Ant 作为构建工具，Ant 需要用到的一些三方库，也被放在这里。从 2.0 开始，Sea.js 采用 Grunt 来构建，因此这个目录就变成了 Grunt 相关文件的存放地。等讲到 Sea.js 的构建时，会再详细说说。\n4. dist 目录，也是源自 YUI 社区的习惯。在 YUI 的项目里，会有一个 build 目录，用来存放合并压缩好的可部署文件。dist 目录应不应该出现在源码里，一直存在争议。理想主义派觉得，这东东压根儿不应该出现在源码里，源码库应该纯粹简单，只存放源码。实用主义派则觉得，另搞一台服务器存放构建好的文件太麻烦了，无论是对开发者，还是使用者。在硬盘空间如此廉价的时代，牺牲点空间，抹去点洁癖，保留 dist 目录最简单使用。Sea.js 是实用主义派，因此保留了 dist 目录。dist 是 distribution 的缩写，用来存放构建好的可部署文件，也是业界的一个准规范。\n5. 其他都是单个文件，其中 package.json 最值得一提，这源自 CommonJS 社区的 Packages 规范。在 CommonJS 的视角，任何项目，都可以看成一个或多个包，每个包都有一些基本信息，这些信息统一放在 package.json 中描述。目前 package.json 已遍布各种开源项目，里面的信息，看一下就明白。\n## 最后\n\n本以为目录结构没什么可讲的，一不小心写了这么多，真心有些感慨，看来是我老了。\n\n今天就说这么多，关于目录结构，也希望听听各位的建议，欢迎留言。下一篇会开始讲述 src 目录下的源码。\n\n（完）\n\n题图：那卷起的海浪，是永不逝的花呀。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/167',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/167/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/167/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/167/events',
    html_url: 'https://github.com/lifesinger/blog/issues/167',
    id: 16846559,
    node_id: 'MDU6SXNzdWUxNjg0NjU1OQ==',
    number: 167,
    title: '什么是开源精神',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 33,
    created_at: '2013-07-17T03:58:21Z',
    updated_at: '2019-01-09T05:37:39Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![1a7a2e64156f21eff0d2b58d2e5caa0272f75d89bb7d-je2cv7_fw580](https://f.cloud.github.com/assets/97227/809703/fb7c28d4-ee94-11e2-9cbb-67fb45af1e13.jpeg)\n\n在技术嘉年华的「夜聊」中，谈到开源。当时我的表达不够清晰具体，重新梳理如下。\n### 一、开源精神里最重要的，是拿来主义。\n\n这和大部分人的想法不一样。开源需要贡献、需要付出，但在贡献和付出之前，首要的是去了解、去使用已经存在的。\n\n比如前端工程师，会经常使用模板，天天用着，会有不爽，就会想着自己去写一个模板引擎。直接去写一个没什么不对，但更好的方式是，先去开源社区搜索下同类产品。看自己的想法，是否已经有人实现了，看自己的想法中，哪些是靠谱的，哪些是不太靠谱的。\n\n注意不要去做「纯调研」，除非你已经是这方面的专家，有过体系化的研究和深入。「纯调研」是指，找到类似的产品，浅尝辄止地跑跑 demo，就开始出表格，横向比较优劣。更笨但更有效地做法是，直接去用，比如我们选择了 Handlebars ，在项目真正使用过程中，才能深触地感受到 Handlebars 的优点及其缺点。有过这么一段深入使用经验后，类似的前端模板引擎，比如 Mustache、Hogan 等，也有大概清楚个七七八八了。\n\n拿来主义不光能省去开发成本，还能让你扩充见识和想法，而不会成为井底之蛙还茫然自得。\n### 二、在开源世界里，参与比主导更重要。\n\n遵循拿来主义，可以让你更懂得他人。在这过程中，会有欣赏、感谢，也会有抱怨、想法。\n\n前端 DOM 操作类库中，很多公司包括支付宝都选择了 jQuery。使用过程中，jQuery 的一些 API 的设计非常赞，一些内部实现也非常漂亮。遇到这些让人欣赏的点时，别忘了将自己的感想写下来。那怕是一篇微博，或是跟朋友闲聊时的只言片语，所有这些，都是参与，都是正能量的传播。社区的赞誉，可以给 jQuery 开发团队最大的鼓励。很多坚持，是因为有肯定。\n\n当然，jQuery 只要存在一天，就一定存在不足。比如 data 的 API 变化，比如动画不支持纯 CSS3 方式，还有 Sizzle 也并非那么完美。所有这些「缺点」，你遇到的 bug，你踩过的坑，当你有好的想法或解决方案时，不要忘记反馈给社区。jQuery 有详细的反馈渠道，一般成熟的开源社区都会有。比如托管在 GitHub 上的项目，一般都可以通过 Issues 给社区提交你的想法，甚至可以通过 Pull Request 直接提交你修改过的代码。\n\n参与进去，可以让你更懂得美，懂得感恩之心，懂得回馈之情。这在过程中，你的功力，往往也会大增。不光是技术上的进步，还包括英语读写能力。在人性沟通上，你也会收获很多，这是无价的财富。\n\n拿来主义是开源的第一步，参与则是开源中最漫长的一步。开发自己主导的项目不是必须的，除非你真的有很好的想法，同时刚好有旺盛的精力，否则不要轻易开始，那不代表什么，往往什么也不是。比如 Sea.js，如果 RequireJS 当初能接受我的建议，或者 FlyScript 的作者不退隐江湖，那么就不会有 Sea.js。让一些事情自然地发生，让豆瓣从土壤中发芽。更多地去享受参与，保持简单与自然。\n### 三、开源的是社区，代码仅是很小的一部分。\n\n虽然代码很重要，但在开源项目里，源码只是重要的因素之一。\n\n除了代码，还有文档、测试用例、Issues 管理、版本发布、升级策略、书籍、视频等等。jQuery、Backbone、AngularJS 等成熟项目，成熟的是社区，而不是源码。好的社区，是在 Google 中一搜索，就能找到不少资料。好的社区，是你踩过的坑，经常已经有人也踩过并整理分享出来了。\n\n社区的形成很难，需要核心团队澎湃持久的激情，还需要天时、地利、人和。jQuery 已经形成庞大的社区，但其兄弟 YUI3 的社区，一直不是很成气候。两三年前，我想找 YUI3 的总体设计文档，以及部分组件的设计文档，搜索了很多很多地方，最后给原作者发信，依旧都未能找到我想要的资料。但 jQuery，基本每个细节，都能比较轻松地就找到相关资料和讨论。\n\n没有社区的开源项目，其源码会一直停留在「孤芳自赏」阶段。几年前的 KISSY，还有百度的 Tangram，个人觉得都停留在初始阶段，发展很难。有社区的开源项目，其源码会活起来，会自我不断进化升华。我参与过的一个典型项目是 Backbone，倘若你现在再回过头去看 Backbone 最初提交的代码，与现在的相比，真心会觉得有点挫了。最让人不可思议的是，Backbone 最初很挫的代码，在社区的参与下，在不断的讨论和 Pull Request 中，现在已经演化成非常高质量的代码，甚至每一小段代码里，都能说出一个故事来。我现在依旧非常关注 Backbone 的每一次代码变化，特别是自己修改过的部分。从其他人的修改中，能收获很多很多。\n\nBackbone 的例子，也展示了一个更好的开源方式：有了好的想法，就分享出来，最初的代码展现基本的思路就好，然后通过社区的参与，不断往前演化，让大家都成为开发者，群体的力量远大于个体。个人英雄式的开源方式，已经过时了，就像 sourceforge.net 一样。\n\n最后，知易行难。上面的道理或许大家都懂，真要做到，则是一场修行。Sea.js 和 Arale 也才刚刚上路，旅途中，有西湖惬意的微风，也有沙漠般的烈日当头。好在，选择了，就不怕远。\n\n（完）\n\n题图：可以不解释么？\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/166',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/166/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/166/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/166/events',
    html_url: 'https://github.com/lifesinger/blog/issues/166',
    id: 16814905,
    node_id: 'MDU6SXNzdWUxNjgxNDkwNQ==',
    number: 166,
    title: '谈谈编码风格与编码规范',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 28,
    created_at: '2013-07-16T15:12:09Z',
    updated_at: '2018-07-13T10:00:16Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![image](https://f.cloud.github.com/assets/97227/805593/ec1b4aa2-ee29-11e2-8719-ce1465b7ad15.png)\n## 引子\n\n上一篇文章提到 [「习惯与变化」](https://github.com/lifesinger/lifesinger.github.com/issues/165)，收到了比较有意思的一些反馈：\n\n> 我很好奇，如果你的团队中有人以“习惯”的名义打破编码规范会怎样？于我而言，不写四直接写五就是这种感觉，这并不是习惯，而是规范。\n\n还有一封很长的邮件，截取一二：\n\n> 玉伯哥，我经常会为一些事情纠结，比如创建文件夹的时候会想是首字母大写好看呢还是全小写来保持统一呢（Movie，movie，mytest，MyTest），当写程序注释的时候我会想是写 // this function proves that... 好呢还是 // This function proves that...  我不知道我这种对大小写在意的习惯是一种好习惯还是一种坏习惯……\n\n微博上，一提到编码风格时，往往也会引起腥风血雨，比如\n1. JavaScript 语句后面应该加分号吗？\n2. 缩进应该用 Tab、四空格还是两空格？\n3. 变量应该统一提前声明好还是就近声明？\n4. 变量名应该用驼峰风格还是下划线风格？\n5. 注释应该采用 JSDoc 风格还是 Markdown 风格？\n6. 私有属性约定用下划线开头吗？\n7. 函数最好不要超过多少行？\n8. ……\n\n这类问题不仅在程序员中普遍存在，文字工作者也常常纠结：\n1. 中英文混排时，中文与英文之间应该加空格吗？\n2. 中英文混排时，英文字母后面应该用全角还是半角标点符号？\n3. 段落前面真有必要空两格吗？\n4. 引号是否应该用 『』和「」？\n5. 破折号是一杠还是两杠？\n6. 例如、参考等词汇后，究竟需不需要加冒号？\n7. ……\n## 风格\n\n我们日常说的编码规范，经常指的是 Style Guide，正确的翻译是编码风格。\n\n既然是风格，就没有对错。就如现实生活中，我们每个人都有自己的穿着打扮一样。可能有些人打扮土一点，但土就土，并不影响什么。\n\n很有意思的是，风格也没有孰优孰劣。比如郭敬明的打扮，很多人很喜欢，会为其尖叫为其疯狂。但在我看来，郭敬明的相貌让我非常讨厌，这还是男人吗？太锉啦。\n\n别去争辩，喜欢和对错无关，风格亦无高低之别。\n\n编码风格如此，文字排版风格也是一样。\n## 规范\n\n风格之外，也有规范。比如穿着打扮，光怪陆离都没问题，但在公众场合不能不穿。规范经常很少很少，但的的确确存在。\n\n对于 JavaScript 语言来说，通用的编码规范基本没有，有的话只有一条：要能运行。除此之外，还会有一些：\n1. JavaScript 文件的编码必须是 UTF-8 。\n2. JavaScript 中不能出现 URL 硬编码。\n3. ……\n\n以上规范都是针对具体公司具体场景下的要求，除了以上这些规范，其他都是编码风格问题。\n\n社会中的规范，是为了维护基本秩序和道德底线。编码规范，则是为了避免错误。\n## 态度\n\n程序员经常有个坏习惯：拿到别人的代码，喜欢首先按照自己的风格格式化一下。特别是用 Vim 的程序员，有些 Vim 程序员不光喜欢格式化他人的代码，还会在文件头留下作案凭证。\n\n好的习惯是这样的：\n\n> @agentzh: 给他人的开源项目提交补丁也是一样：尽可能多地做足功课，弄清楚该项目使用的代码风格和测试集的组织，甚至是 git 提交日志的书面格式，尽量让我写的东西酷似项目作者本人写出的东西，这样可以节约对方的时间，是对他的最大尊重。\n\n这就如我们去朋友家里做客，你可能会很不喜欢朋友家里的装修风格，但你最好不要自带颜料桶去帮朋友重新装修。道理不用多说，对他人的风格我们要懂得尊重，无论是在现实生活中，还是在写代码时。\n\n当然，认可的规范还是得遵守。比如别在公共场合裸奔，别在一个 UTF-8 团队把文件存成 GBK 编码。\n\n对待规范，要严格遵守。对待风格，要懂得尊重。\n## 关键\n\n一旦你拥有了开放的心态，一旦你开始懂得去欣赏他人的风格，你会发现世界是五彩缤纷的，你会开始越过一些表象，关注起一些真正值得关注的。\n\n比如一个长得很丑的人，当你不再去看外表时，你会发现某些情况下丑人是会发光的，那种光十分漂亮，比很多帅哥漂亮百倍千倍。你会开始懂得生活，懂得真爱。\n\n编码也如此。不再去纠结四空格还是两空格后，你会看到\n1. 代码的逻辑抽象是否正确？\n2. 代码背后的数据模型是否可以优化？\n3. 这段代码是否应该放在这个文件里？\n4. 这个模块的职责是否过大？\n5. 这个设计模式是否用得太僵硬？\n6. 某个功能点是否应该用 CSS 而不是 JS 来实现？\n7. 这段代码是否忘了写单元测试？\n8. ……\n\n一旦你开始能从他人的代码中，去纠结以上各种问题而不是代码风格时，你的功力经常就会大增。牛逼的程序员有个不怎么对外说的秘密：\n\n> 去更多地看代码，看优秀的代码。迫不得已才自己去写少量代码。\n## 最后\n\n代码如人，风格的差异很正常，彼此尊重。相爱是灵魂的碰触，别停留在表象。\n\n（完）\n\n题图：Style Guide 无处无在。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/165',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/165/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/165/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/165/events',
    html_url: 'https://github.com/lifesinger/blog/issues/165',
    id: 16632814,
    node_id: 'MDU6SXNzdWUxNjYzMjgxNA==',
    number: 165,
    title: '习惯与变化',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 24,
    created_at: '2013-07-11T14:14:15Z',
    updated_at: '2018-01-17T08:51:37Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![image](https://f.cloud.github.com/assets/97227/782015/716c541c-ea33-11e2-8682-9d5a947cc903.png)\n\n（一）\n\n我们都有很多很多习惯。上次去北京，满地铁的人，有七八成在看移动设备。真的需要这么「刻苦努力」吗？我自己也有饭桌上刷微博的习惯，但最近越来越觉得没什么可看的。就如两三年前每天看 Google Reader 一样，当初觉得很好的习惯，现在想想真心有些浪费时间。\n\n年龄越大，往往习惯越多。男朋友会习惯女朋友晴天的伞，丈夫会习惯妻子的饭菜。在形成习惯之前，女朋友打伞的角度，都是一种感动。妻子的一声吃饭了，你会跑过去亲亲老婆。然而很多情感、触动，都会消逝在时间里。习惯是一味可怕的麻醉剂，三年、五年、十年后，你变得只会抱怨妻子的饭菜不好吃，你不再会为妻子的劳碌而感动，你关闭了你的心。\n\n习惯会变味。当心关闭时，甜蜜就会变成漠视与矛盾。\n\n（二）\n\n朋友小胖，几个月前，写 JavaScript 代码是肯定会加分号的。最近几个月，因为协作开发，代码风格逐步变成了默认不加分号。这个习惯的改变，只花了不到两周时间。\n\n更有意思的是，小胖现在看到加分号的代码时，会觉得冗余，甚至有去删除分号的欲念。\n\n习惯就这么悄悄变化着，形成新的习惯。\n\n（三）\n\nWTP 停了好长一段时间。在未停之前，每天晚上都会想着写点什么，甚至有点「上瘾」，不写不舒服。然后有一天，就发现自己能写出的新东西比较有限。有了怀疑，对初衷的怀疑，突然就不想写了，就停了。\n\n白鸦说写作最大的受益者是自己，我觉得有个前提，是不重复。最近很少看微信，「孕峰」、「小道消息」、「骑行西藏」等公众帐号更新挺勤快，可我却没了什么去读的欲念。比如「小道消息」，很多文章，看了标题，大概就能猜出作者会写什么，因为对作者很了解。就像明白一些物理原理之后，再去看很多物理现象时，大多是求证，很难有新东西。\n\n习惯了习惯之后，最难得的是变化，是新东西。\n\n（五）\n\n为什么没有（四）？是你的习惯觉得这样不妥，可是真的没什么不妥。打破习惯会难受，然而人一难受，往往就会发现新东西，就有机会扩大认识。\n\n有一天，我的自行车轮胎破了。修好后，突然间也不想骑。于是我选择了走路去公司，走了快两个小时。天很热很热，汗流浃背。那一路让我想起很多，想起小时候经常走的山路，想起大学期间的勤工俭学，想起在老家庄稼地里的劳作，想起从小的探险梦，甚至想起奥巴马那黑色的皮肤。大热天，太阳照在流汗的脸庞，有一种特真实的感觉。街旁的树，偶尔的树荫，一切平时匆忙而过的，都真切而鲜活。漫漫长路，人顿然渺小。那一刻，人的谦卑是有形状的，梦的坚持也是有颜色的。旅行未必要出去，旅行就在脚下。\n\n习惯需要变化，变化能让你认清自己。\n\n（九）\n\n最近半年，基本养成了六点多起床，十点多前睡觉的「老年人」习惯。这样早晨十点前，有不少安安静静的时间。偶尔也会打破，比如熬到凌晨一两点才睡。但打破的成本很高，会让第二天无精打采，得不偿失。打破是种变化，当变化不能带来新东西时，就不如坚持惯例，培养成习惯。这往往是好习惯。\n\n两三年前，阅读 Google Reader 是我每天坚持的习惯。后来因为墙，也因为家庭、工作忙，就好久好久没去上了。等再去翻阅时，只能望着那 1000+ 而感慨。这个变化挺有意思，更有意思的是，Google 今年还干脆让 Reader 下线了。当很多人还在找替代品时，我却连备份也没去做。过去的习惯就留在过去吧。其实就如微博一样，也如微信一样，哪篇你从来不用，也不会有什么重大损失，只要你的眼和心不停留于安逸满足。\n\n习惯需要变化，也需要坚持。在不断的变化与坚持中，无用的习惯会发霉死去，好的习惯则会烙成性格。性格很难改变你的命，但能影响你的运。\n\n（完）\n\n题图：狗的尾巴是你的手，那条绳子是微信、微博，小心成为习惯的奴隶，再无自由。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/164',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/164/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/164/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/164/events',
    html_url: 'https://github.com/lifesinger/blog/issues/164',
    id: 14442226,
    node_id: 'MDU6SXNzdWUxNDQ0MjIyNg==',
    number: 164,
    title: 'Page Visibility 的 API 设计',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 17,
    created_at: '2013-05-17T08:21:43Z',
    updated_at: '2013-07-29T05:54:11Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![d1a014252bf0dea30fad26f081ea0643](https://f.cloud.github.com/assets/97227/516911/24a86808-beca-11e2-991e-559d8fe0e4ed.jpg)\n\n昨天的文章发出时，有一处严重错误：\n\n> document.hidden 是布尔值，true 表示页面可见，false 表示不可见。\n\n有意思的是，这个错误如此严重，但却只有 2 个人发现并回复给我。这个小故事背后，可以看到：\n1. 人类大脑的纠错本领特别强。如果你到现在还不知道错在哪，说明你的大脑超强。\n2. 为什么我会犯这个错呢？是我的问题，还是 document.hidden 设计不人性？\n\n人类大脑太复杂高深，在此就不研究了。我们从 API 设计层面来说说一些有意思的事情。\n## 向后兼容\n\n为什么要是 document.hidden，而不是 document.visible？如果设计成 document.visible，那么 true 表示可见，false 表示不可见，是多么自然的事情啊。\n\n我们从代码使用上入手来想想。如果设计成 document.visible，很容易写出：\n\n``` js\nif (document.visible) {\n  // 页面可见时的正常逻辑\n} else {\n  // 页面不可见时，减少点资源占用\n}\n```\n\n上面的代码初看没什么问题，但作为前端，眼尖一点不难发现是有问题的：\n\n**在尚不支持 Page Visibility API 的浏览器中，document.visible 的值是 undefined.**\n\n为了让代码在老浏览器里也没问题，一种可行的写法是：\n\n``` js\n// 在老浏览器上，始终判定页面为可见\nif ( typeof document.visible === \'undefined\' || document.visible === true) {\n  // 页面可见时的正常逻辑\n} else {\n  // 页面不可见时，减少点资源占用\n}\n```\n\n上面这种写法，需要一定经验才能写出来。否则稍不留意，就会掉坑里。\n\n如果设计成 document.hidden，则一切简单多了：\n\n``` js\nif (document.hidden) {\n  // 页面不可见时，减少点资源占用\n}\n```\n\n老浏览器上，document.hidden 取值为 undefined，可以当做布尔值 false 来使用。\n\n这是 API 设计上的一种向后兼容。给任何现有体系增加新接口，都需要仔细考虑场景，做到向前的功能增强，同时向后也能合理兼容。\n## 可扩展性\n\n还有一个接口是：\n\n```\ndocument.visibilityState\n```\n\n规范中明确可取的值是：visible、hidden、prerender、unloaded\n\n作为枚举值，最大的好处是，可以方便增加新状态。比如页面所在浏览器窗口被其他窗口完全遮挡住时，visibilityState 的取值可以是 obscured. 虽然目前没有这个状态值，但未来如果真的有需求，就可以很方便添加上。\n\n这是 API 可扩展性设计中很小的一个点，优美往往隐藏在细节里。\n## 一致性\n\n最后想说的接口是 visibilityState 属性值发生变化时的事件：visibilitychange 。\n\n为什么不是 visibilityChange? 或 change:visibility 等命名？\n\n命名永远是计算机科学里的两大难题之一。\n\n对于前端来说，下面这些 DOM 事件不应该陌生：\n\n```\nmousedown\nmousemove\nkeypress\nkeyup\ntouchstart\ndragleave\nreadystatechange\npropertychange\n```\n\n有了上面这些事件名作为参考，visibilitychange 看着就非常舒服了。\n\n舒服是因为习惯，是因为一致。看似简单的命名，真心不简单。\n## 小结\n\n向后兼容、可扩展性、一致性，这是 API 设计时经常要考虑的三个方面。Page Visibility 看似简单，着实不简单。\n\n还有规范化的思维和做事方式，也非常值得我们学习。国内经常只有问题的解决，却缺了规范的沉淀，导致很多问题虽然能解决掉，但却很难传播推广开来。\n\n历史的仓库里，藏着多少泪。\n\n文 / 玉伯\n\n题图：依旧是可爱的龙猫，看不明白高楼大厦里的人类，究竟在忙活什么。\n\n最后，两个小思考留给大家：\n1. DOM 事件名，大部分都被设计成小写单词直接拼起来（比如 keypress、readystatechange），这是出于什么考虑？\n2. 在 DOM 事件中，Mutation 类事件名，是驼峰风格（比如 DOMNodeInserted），这又是为什么呢？\n\n期待大家的思考与回复，成长就在参与中。\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
  {
    url: 'https://api.github.com/repos/lifesinger/blog/issues/163',
    repository_url: 'https://api.github.com/repos/lifesinger/blog',
    labels_url:
      'https://api.github.com/repos/lifesinger/blog/issues/163/labels{/name}',
    comments_url:
      'https://api.github.com/repos/lifesinger/blog/issues/163/comments',
    events_url:
      'https://api.github.com/repos/lifesinger/blog/issues/163/events',
    html_url: 'https://github.com/lifesinger/blog/issues/163',
    id: 14406696,
    node_id: 'MDU6SXNzdWUxNDQwNjY5Ng==',
    number: 163,
    title: 'Page Visibility 初探',
    user: {
      login: 'ahungrynoob',
      id: 97227,
      node_id: 'MDQ6VXNlcjk3MjI3',
      avatar_url: 'https://avatars2.githubusercontent.com/u/97227?v=4',
      gravatar_id: '',
      url: 'https://api.github.com/users/lifesinger',
      html_url: 'https://github.com/lifesinger',
      followers_url: 'https://api.github.com/users/lifesinger/followers',
      following_url:
        'https://api.github.com/users/lifesinger/following{/other_user}',
      gists_url: 'https://api.github.com/users/lifesinger/gists{/gist_id}',
      starred_url:
        'https://api.github.com/users/lifesinger/starred{/owner}{/repo}',
      subscriptions_url:
        'https://api.github.com/users/lifesinger/subscriptions',
      organizations_url: 'https://api.github.com/users/lifesinger/orgs',
      repos_url: 'https://api.github.com/users/lifesinger/repos',
      events_url: 'https://api.github.com/users/lifesinger/events{/privacy}',
      received_events_url:
        'https://api.github.com/users/lifesinger/received_events',
      type: 'User',
      site_admin: false,
    },
    labels: [
      {
        id: 9413174,
        node_id: 'MDU6TGFiZWw5NDEzMTc0',
        url: 'https://api.github.com/repos/lifesinger/blog/labels/blog',
        name: 'blog',
        color: 'DDDDDD',
        default: false,
      },
    ],
    state: 'open',
    locked: false,
    assignee: null,
    assignees: [],
    milestone: null,
    comments: 26,
    created_at: '2013-05-16T13:53:17Z',
    updated_at: '2014-06-30T02:14:47Z',
    closed_at: null,
    author_association: 'OWNER',
    body:
      '![screen shot 2013-05-16 at 9 47 19 pm](https://f.cloud.github.com/assets/97227/512680/31ae0242-be2f-11e2-8f1f-166a71cc5fa3.png)\n\n前天，[Page Visibility](http://www.w3.org/TR/2013/REC-page-visibility-20130514/) 正式成为 W3C 推荐规范。为什么需要有这个规范呢？\n## 来由\n\n遥想 IE6 时代，就有用户喜欢一次性打开多个页面，然后逐个查看。随着标签页成为浏览器的标配，以及硬件性能的提升，一个用户电脑上同时打开很多标签页，是司空见惯的事情。这带来一些思考：\n1. 处于当前焦点的页面永远只有一个，但用户的屏幕越来越大，处于可见状态的页面往往不止一个。\n2. 当页面处于不可见状态时，UI 绘制、更新轮询等代码执行，往往可以停下来或频率变慢，这可以节省 CPU 等硬件损耗。对移动设备来说特别重要，能延长电池续航时间。\n3. 但之前各个浏览器并不提供 API 来直接判断页面的可见性。可以通过 `window.focus / blur` 以及其他一些奇技淫巧来间接判断，但并不靠谱。\n\n有明确的需求，却无法很好地通过代码来实现，这时就诞生了提议、规范。Page Visibility 就是用来规范页面可见性的接口文档，让各个浏览器对外的接口一致。\n## 规范\n\nPage Visibility 规范明确了 document 上的两个属性：\n\n``` js\ndocument.hidden\ndocument.visibilityState\n```\n\n`hidden` 是布尔值，`true` 表示页面不可见，`false` 表示可见。\n\n要理解 `hidden` 属性的真正含义，得仔细推敲下『可见』。\n\n**根据规范，『可见』是指，页面中至少有部分内容在屏幕上对用户可见。**\n\n按照上面的定义，『不可见』理论上应该包含以下各种情况：\n1. 页面是后台标签页，不是当前标签页。\n2. 页面所在浏览器窗口处于最小化状态。\n3. 页面所在浏览器的位置不在当前屏幕。\n4. 页面所在浏览器被当前屏幕的其他程序完全遮挡住。\n5. 用户屏幕处于锁屏或关闭等状态。\n\n理想与现实总是存在距离。截至今天为止，各个浏览器对『不可见』的理解还存在差异：\n1. 在 Chrome 和 Safari 等 WebKit 浏览器下，仅当页面是后台标签页时，页面状态才不可见。\n2. 在 Firefox 下，页面是后台标签页，或所在窗口处于最小化状态时，页面状态都为不可见。\n3. Opera 跟 Chrome 一样。\n4. IE10 没测。\n\n可以看出，实际使用时，『可见』的含义是指：\n\n**『可见』表示，页面是非最小化浏览器窗口的当前标签页。**\n\nFirefox 的实现目前最靠近理想情况，Chrome 等浏览器仅考虑了最简单的情况，还有待完善。\n\n一般来说，`document.hidden` 属性就够用了。但在要求非常高的页面中，需要使用到 `document.visibilityState` 属性。\n\n`visibilityState` 是字符串，可取以下值：\n1. `hidden` 表示页面不可见。\n2. `visible` 表示页面可见。\n3. `prerender` 表示页面正在预处理阶段，还未显示出来。\n4. `unloaded` 表示页面虽然还显示着，但已经要被 unload 了。\n\n前两个值不再解释。后两个值很有意思：\n1. 当前标签页处于初始加载，还未渲染出来时，因为是当前标签页，`document.hidden` 是 `false`，但这时页面其实并不可见（还未渲染出来），这时 `visibilityState` 的值就是 `prerender`，可用来精准判断初始渲染阶段。\n2. 类似的，当发生前进、后退、关闭等操作时，虽然当前页面依旧可见，但实际上可以按照不可见来处理了。这时 `document.hidden` 是 `false`，`document.visibilityState` 则是 `unloaded`。\n\n注意：`prerender` 和 `unloaded` 这两个值，目前稳定版 Chrome 和 Firefox 都尚未支持，暂时慎用。以后 `visibilityState` 应该还可以有更多值，包括当前窗口被其他窗口完全遮挡住的情形，很可能也会用某个值来表示。\n\n除了以上两个属性值，还可以通过 `document` 的 `visibilitychange` 事件来监听 `visibilityState` 的状态变化，这个就不多说了。\n## 实践\n\n目前除了 Opera，其他浏览器都需要添加前缀：\n\n``` js\ndocument.webkitHidden\ndocument.mozHidden\ndocument.msHidden // IE10\n```\n\n具体示例代码，可以参考下面两份文档：\n1. [MDN: Using the Page Visibility API](https://developer.mozilla.org/en-US/docs/Web/Guide/User_experience/Using_the_Page_Visibility_API)\n2. [Google Developers: Using the Page Visibility API](https://developers.google.com/chrome/whitepapers/pagevisibility)\n\n（话说 Google 的文档也是大部分抄自 MDN 的，哈哈）\n## 最后\n\n别看着看着忘了 Page Visibility 的初衷哦。一般情况下我们用不着，当需要性能优化，特别是要节省资源占用时，通过 Page Visibility 的状态来调整代码执行是非常非常有必要的。\n\n文 / 玉伯\n\n题图：可爱的龙猫，在思考什么是可见的，什么是不可见的。\n\n附语：技术文如我所料，鲜有人回复。某个口头表扬我的同学，也别吝啬文字哦，否则……\n\n---\n\n欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：\n\n![](http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg)\n',
  },
];
